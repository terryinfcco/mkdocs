{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Grandpa Terry's Personal Knowledge Base (Sounds pompous doesn't it?) Basically a place to grab the stuff I'm trying to learn from books, Udemy, Youtube, and the Web in general. To work with this mkdocs site: add or edit the files inside the docs folder mkdocs serve --> serves the site locally. Execute from folder that contains mkdocs.yml mkdocs gh-deploy --> serves the site to github. Execute from folder that contains mkdocs.yml Back To terryinfcco.com For full documentation about the tool used to build this site, visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Grandpa Terry's Personal Knowledge Base"},{"location":"#grandpa-terrys-personal-knowledge-base","text":"(Sounds pompous doesn't it?) Basically a place to grab the stuff I'm trying to learn from books, Udemy, Youtube, and the Web in general.","title":"Grandpa Terry's Personal Knowledge Base"},{"location":"#to-work-with-this-mkdocs-site","text":"add or edit the files inside the docs folder mkdocs serve --> serves the site locally. Execute from folder that contains mkdocs.yml mkdocs gh-deploy --> serves the site to github. Execute from folder that contains mkdocs.yml Back To terryinfcco.com For full documentation about the tool used to build this site, visit mkdocs.org .","title":"To work with this mkdocs site:"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"markdown-notes/","text":"Sections Code Blocks Headers Quotes Emphasis Horizontal Rule Line Breaks Lists Unordered Lists Ordered Lists Links Code_Blocks To get code highlighting enclose the code in triple backticks, and the first set of triple backticks should be followed by a space and then the language (like python). Headers H1 uses one # sign H2 uses two # signs H3 uses three # signs H4 uses four # signs Quotes A Quote is preceded by a > (right arrow). It appears with a gray background. It can be combined with other formatting - so you can put a header or bold or italics in a quote. Normal Text Emphasis You can emphasize text 3 ways. Bold text is created by surrounding the text with 2 asterisks Bold text with italics created by surrounding the text with 3 underscores. Italics is done with one asterisk surrounding text Horizontal Rule A horizontal rule is created with 3 dashes on a line by themselves Line Break End line with 2 spaces and a return Lists Unordered Lists Can use asterisks or hyphens or plus signs to create a list sub list items are created by indenting with a tab and you can continue to indent. Ordered Lists Just precede the list item with a number and a period. Doesn't matter which number, it will just go in the right order anyway. Again you can use tabs to indent for a sublist. Links Create a link by surrounding it with left and right arrows. https://www.google.com To have a name description show up precede the link by the text you want contained in square brackets. Google Then use parentheses around the url rather than left and right arrows. To link to a header somewhere in the same page. You have to manually create a Table of Contents pointing to the header. Note that the link in the Table of Contents is preceded by a #, is all lowercase and that any spaces are converted to dashes for the purpose of the link. * [Horizontal Rule](#horizontal-rule) * [Links](#links) ## Horizontal Rule ## Links Back to Top","title":"Markdown notes"},{"location":"markdown-notes/#sections","text":"Code Blocks Headers Quotes Emphasis Horizontal Rule Line Breaks Lists Unordered Lists Ordered Lists Links","title":"Sections"},{"location":"markdown-notes/#code_blocks","text":"To get code highlighting enclose the code in triple backticks, and the first set of triple backticks should be followed by a space and then the language (like python).","title":"Code_Blocks"},{"location":"markdown-notes/#headers","text":"","title":"Headers"},{"location":"markdown-notes/#h1-uses-one-sign","text":"","title":"H1 uses one # sign"},{"location":"markdown-notes/#h2-uses-two-signs","text":"","title":"H2 uses two # signs"},{"location":"markdown-notes/#h3-uses-three-signs","text":"","title":"H3 uses three # signs"},{"location":"markdown-notes/#h4-uses-four-signs","text":"","title":"H4 uses four # signs"},{"location":"markdown-notes/#quotes","text":"A Quote is preceded by a > (right arrow). It appears with a gray background. It can be combined with other formatting - so you can put a header or bold or italics in a quote. Normal Text","title":"Quotes"},{"location":"markdown-notes/#emphasis","text":"You can emphasize text 3 ways. Bold text is created by surrounding the text with 2 asterisks Bold text with italics created by surrounding the text with 3 underscores. Italics is done with one asterisk surrounding text","title":"Emphasis"},{"location":"markdown-notes/#horizontal-rule","text":"A horizontal rule is created with 3 dashes on a line by themselves","title":"Horizontal Rule"},{"location":"markdown-notes/#line-break","text":"End line with 2 spaces and a return","title":"Line Break"},{"location":"markdown-notes/#lists","text":"","title":"Lists"},{"location":"markdown-notes/#unordered-lists","text":"Can use asterisks or hyphens or plus signs to create a list sub list items are created by indenting with a tab and you can continue to indent.","title":"Unordered Lists"},{"location":"markdown-notes/#ordered-lists","text":"Just precede the list item with a number and a period. Doesn't matter which number, it will just go in the right order anyway. Again you can use tabs to indent for a sublist.","title":"Ordered Lists"},{"location":"markdown-notes/#links","text":"Create a link by surrounding it with left and right arrows. https://www.google.com To have a name description show up precede the link by the text you want contained in square brackets. Google Then use parentheses around the url rather than left and right arrows. To link to a header somewhere in the same page. You have to manually create a Table of Contents pointing to the header. Note that the link in the Table of Contents is preceded by a #, is all lowercase and that any spaces are converted to dashes for the purpose of the link. * [Horizontal Rule](#horizontal-rule) * [Links](#links) ## Horizontal Rule ## Links Back to Top","title":" Links"},{"location":"vscode/","text":"Code-OSS notes Markdown Preview - Ctrl+k, v","title":"Code-OSS notes"},{"location":"vscode/#code-oss-notes","text":"Markdown Preview - Ctrl+k, v","title":"Code-OSS notes"},{"location":"Blog/2020/12/2020-12-23-my-first-post/","text":"Worked through Bill Raymond videos on YouTube to get this far with Jekyll. Got a note that I can't use passwords on github anymore. I'm going to see what I need to do to fix it. First I enabled 2 factor authentication. Fooling around with Mate. Right now using the pantheon layout and changing keyboard shortcuts. Back to i3 Window Manager on Ubuntu Mate. Having trouble on my arch install with the wireless network sometimes not being there.","title":"December 23, 2020 Jekyll Mate I3"},{"location":"Blog/2020/12/2020-12-27-journal/","text":"Plan for Next Couple of Days: Document how I add a post to Jekyll Fix grandpaterry.xyz so it boots to the bootstrap menu screen Add links to the grandpaterry.xyz menu for wordpress and the Get Coding book Clean up my office area so I can work on the Elegoo course from Paul McWhorter Set up to be able to take what I learn from the Elegoo course and apply it to the Rexqualis Raspberry Pi kit.","title":"December 27, 2020 Plans grandpaterry.xyz Elegoo"},{"location":"Blog/2020/12/2020-12-27-journal/#plan-for-next-couple-of-days","text":"Document how I add a post to Jekyll Fix grandpaterry.xyz so it boots to the bootstrap menu screen Add links to the grandpaterry.xyz menu for wordpress and the Get Coding book Clean up my office area so I can work on the Elegoo course from Paul McWhorter Set up to be able to take what I learn from the Elegoo course and apply it to the Rexqualis Raspberry Pi kit.","title":"Plan for Next Couple of Days:"},{"location":"Blog/2020/12/2020-12-28-journal/","text":"Working on Jekyll Found another video series on jekyll - this one by a guy named Thomas Bradley. He goes through collections, data and pages, all of which are important to me. And once I get more organized, I want to be able to include these notes in a file that's easier to find but for now, I'm going to make a couple of lists. One is going to be tools I'm using - that way since I like distro hopping so much I can have a list that's better than the general one that's in my head. The other is a list of what I need to do to make changes to my jekyll github website. Tools Git Markdown editor - right now using Ghostwriter Syncthing Adding to Jekyll Create new content - right now all I know how to do is posts. git status to make sure it's what I expect. git add * git commit -m \"Describe what you did\" git push origin master","title":"December 28, 2020 Jekyll"},{"location":"Blog/2020/12/2020-12-28-journal/#working-on-jekyll","text":"Found another video series on jekyll - this one by a guy named Thomas Bradley. He goes through collections, data and pages, all of which are important to me. And once I get more organized, I want to be able to include these notes in a file that's easier to find but for now, I'm going to make a couple of lists. One is going to be tools I'm using - that way since I like distro hopping so much I can have a list that's better than the general one that's in my head. The other is a list of what I need to do to make changes to my jekyll github website.","title":"Working on Jekyll"},{"location":"Blog/2020/12/2020-12-28-journal/#tools","text":"Git Markdown editor - right now using Ghostwriter Syncthing","title":"Tools"},{"location":"Blog/2020/12/2020-12-28-journal/#adding-to-jekyll","text":"Create new content - right now all I know how to do is posts. git status to make sure it's what I expect. git add * git commit -m \"Describe what you did\" git push origin master","title":"Adding to Jekyll"},{"location":"Blog/2020/12/2020-12-30-mkdocs-jekyll/","text":"Fitting it all together Right now I feel really good about what I've got going with Mkdocs and the gtpkb installation. I'd like to get that same feeling about Jekyll. My goal is to do documentation in Mkdocs and a blog of sorts in Jekyll. I think my idea of taking notes on paper, then when I've got several sheets created, scan them, upload the png or jpg files to google drive, and then open them in Google Docs. That automatically does an ocr and I've got a text file I can copy into a markdown editor and put into Mkdocs. OpenMediaVault on Raspbery Pi 4 Every time I decide I'm going to use the pi4 to do development something doesn't work. Today it was youtube playback and then no sound when trying to stream through vlc. So I'm now installing openmediavault on the Raspberry Pi 4 (I did keep the old system if I decide to revert) and the plan is that once it's up and running or at least backed up that the beelink can come upstairs and be my low power development machine.","title":"2020 12 30 mkdocs jekyll"},{"location":"Blog/2020/12/2020-12-30-mkdocs-jekyll/#fitting-it-all-together","text":"Right now I feel really good about what I've got going with Mkdocs and the gtpkb installation. I'd like to get that same feeling about Jekyll. My goal is to do documentation in Mkdocs and a blog of sorts in Jekyll. I think my idea of taking notes on paper, then when I've got several sheets created, scan them, upload the png or jpg files to google drive, and then open them in Google Docs. That automatically does an ocr and I've got a text file I can copy into a markdown editor and put into Mkdocs.","title":"Fitting it all together"},{"location":"Blog/2020/12/2020-12-30-mkdocs-jekyll/#openmediavault-on-raspbery-pi-4","text":"Every time I decide I'm going to use the pi4 to do development something doesn't work. Today it was youtube playback and then no sound when trying to stream through vlc. So I'm now installing openmediavault on the Raspberry Pi 4 (I did keep the old system if I decide to revert) and the plan is that once it's up and running or at least backed up that the beelink can come upstairs and be my low power development machine.","title":"OpenMediaVault on Raspbery Pi 4"},{"location":"Blog/2020/12/2020-12-31-pi4-beelink/","text":"Raspberry Pi 4 Server Progress Got openmediavault and syncthing both working on the Raspberry Pi 4. Copied the music folder to openmediavault and was able to point to that with the Sonos system. Tried to install dokuwiki on the Pi 4 and failed. It's nginx rather than apache2 and I have no idea how to make it work. I started to follow some online instructions but they completely failed. I'm thinking that the best thing I can do is to backup the dokuwiki data files (thank goodness they're plain text - glad I did that) and then over time integrate them into both Jekyll and Mkdocs. OK dokuwiki is backed up into the Thursday folder of the dropbox dokuwiki backups.","title":"2020 12 31 pi4 beelink"},{"location":"Blog/2020/12/2020-12-31-pi4-beelink/#raspberry-pi-4-server-progress","text":"Got openmediavault and syncthing both working on the Raspberry Pi 4. Copied the music folder to openmediavault and was able to point to that with the Sonos system. Tried to install dokuwiki on the Pi 4 and failed. It's nginx rather than apache2 and I have no idea how to make it work. I started to follow some online instructions but they completely failed. I'm thinking that the best thing I can do is to backup the dokuwiki data files (thank goodness they're plain text - glad I did that) and then over time integrate them into both Jekyll and Mkdocs. OK dokuwiki is backed up into the Thursday folder of the dropbox dokuwiki backups.","title":"Raspberry Pi 4 Server Progress"},{"location":"Blog/2021/01/04-01-2021-Catching_Up_Last_Few_Days/","text":"Not sure where I left off, but I've put OpenMediaVault on the Raspberry Pi 4, Apache and Dokuwiki on the Beelink. I've ordered a new ethernet switch and plan to put those devices and the switch in the basement tomorrow. I did work on the first of the coder dojo books today and got through about 20 pages. The idea of only writing down concepts and leaving syntax to be looked up definitely appeals to me.","title":"January 4, 2021 Catching Up Last Few Days"},{"location":"Blog/2021/01/2021-01-05-January_5_2021-Move-Beelink-Pi4/","text":"Pretty decent day. Got the ethernet switch I ordered, and moved Beelink and Pi 4 down to the basement. Fooled around making the Pi 3 that's still in the office so that if I want I can use it with the keyboard, mouse and monitor.","title":"January 5, 2021"},{"location":"Blog/2021/01/2021-01-07-Plans/","text":"I think I want to keep working on the CoderDojo books and I want to go back to working on the tkinter videos from John Elder at Codemy.com. And I think I'd like to play with using them on the Raspberry Pi touch screen and see how that goes.","title":"2021/01/07 Plans"},{"location":"Blog/2021/01/2021-01-08-More-Plans/","text":"I also like the stuff Dave Gray does on YouTube. Particularly that he uses the semantic tags like header, section, etc. So I'm going to work on that. And I read on Reddit that there's a really good free Web Developer learning course called The Odin Project and I want to look at that.","title":"More Plans"},{"location":"Blog/2021/01/2021-01-12-Journal/","text":"Working my way through Bill Raymond's Jekyll Videos on YouTube.","title":"Journal Entry for 1-12-2021"},{"location":"Blog/2021/01/2021-01-12-first-architect-post/","text":"Working on starting by downloading a theme and then making it work rather than starting a blog and then trying to change the theme.","title":"First Post Architect Theme"},{"location":"Blog/2021/01/2021-01-13-figured-out-hostinger-vps/","text":"So I'm not sure I'm all the way there, but I think I'm making progress. I reinstalled the OS on the hostinger vps. I used Ubuntu 18.04 with the LAMP stack, Webmin and Virtualmin already installed. When it finished installing, I tried creating another user terry, but then figured out that hostinger's install had already created a user called terryinfcco. This user has a public_html directory already created and the permissions, etc. all set. So all I have to do is connect with FileZilla to sftp, user terryinfcco. Then uploading to that directory makes everything work. I also set up ssl. I never got the ssl cert that I bought to work, but I did follow a guide they set up to install a free certificate from Let's Encrypt. Only problem is that it only lasts 3 months, so I'm going to have to regularly re-install it. But better than nothing!! Working on customizing jekyll with the minima theme. But much of what I want is in the newest version of the minima theme (3.0) and the newest version I can get is 2.5.1 from rubygems. So tomorrow I think I'll work on forking the minima github repository and see if that gets me version 3.0.","title":"Figuring Out Hostinger VPS"},{"location":"Blog/2021/01/2021-01-14/","text":"MkDocs as a Journal Platform - January 14, 2021 Is there any reason this (MkDocs) can't work as well for a journal as any other platform? I really like the material theme. I don't know if I can do deeper nesting and I'm not sure I want to. Would that have issues around sorting? Also MkDocs is easy to search. I think that's a big plus.","title":"2021 01 14"},{"location":"Blog/2021/01/2021-01-14/#mkdocs-as-a-journal-platform-january-14-2021","text":"Is there any reason this (MkDocs) can't work as well for a journal as any other platform? I really like the material theme. I don't know if I can do deeper nesting and I'm not sure I want to. Would that have issues around sorting? Also MkDocs is easy to search. I think that's a big plus.","title":"MkDocs as a Journal Platform - January 14, 2021"},{"location":"Blog/2021/01/TechLog%20-%202021-01-28/","text":"January 28, 2021 Techlog NextCloud I installed and got nextcloud running on the Raspberry Pi 4. Can't see that I see the point unless I really wanted to replace Dropbox. That would I think be OK if I were running a fancier server on hostinger with more storage. But running it locally doesn't get you any offsite capablility, and at least according to the video I watched there isn't a really good batch upload capability. So I think I'm sticking with SyncThing for the moment. Mkdocs Techlog I'm playing with the idea of using mkdocs for my techlog. I didn't like Grav, and I would feel better about Jekyll if it had a built in search. So here goes nothing. I installed the mkdocs-blog-plugin from the github page and followed instructions. Works pretty well. I'd like to figure out how to get the dates USA style rather than UK style. Pi Zero Inkyphat I changed the update time in the crontab to 15 minutes. Seems silly to have it updating every 5 minutes, it's not like the weather changes that often.","title":"TechLog   2021 01 28"},{"location":"Blog/2021/01/TechLog%20-%202021-01-28/#january-28-2021-techlog","text":"NextCloud I installed and got nextcloud running on the Raspberry Pi 4. Can't see that I see the point unless I really wanted to replace Dropbox. That would I think be OK if I were running a fancier server on hostinger with more storage. But running it locally doesn't get you any offsite capablility, and at least according to the video I watched there isn't a really good batch upload capability. So I think I'm sticking with SyncThing for the moment. Mkdocs Techlog I'm playing with the idea of using mkdocs for my techlog. I didn't like Grav, and I would feel better about Jekyll if it had a built in search. So here goes nothing. I installed the mkdocs-blog-plugin from the github page and followed instructions. Works pretty well. I'd like to figure out how to get the dates USA style rather than UK style. Pi Zero Inkyphat I changed the update time in the crontab to 15 minutes. Seems silly to have it updating every 5 minutes, it's not like the weather changes that often.","title":"January 28, 2021 Techlog"},{"location":"TKinter/basic_template-vid1/","text":"Codemy Tk Template YT Vid1 Basic Template for Tkinter # Codemy Tkinter YouTube Video 1 # First import tkinter from tkinter import * # Now create the main window. Typically called root but can be named most anything. root = Tk () # Create a couple of label widgets myLabel = Label ( root , text = \"Hello World!\" ) myLabel2 = Label ( root , text = \"Line Two\" ) # Pack the label widgets onto the screen myLabel . pack () myLabel2 . pack () # Create the event loop that waits for user to do things on the screen root . mainloop ()","title":"Codemy Tk Template YT Vid1"},{"location":"TKinter/basic_template-vid1/#codemy-tk-template-yt-vid1","text":"","title":"Codemy Tk Template YT Vid1"},{"location":"TKinter/basic_template-vid1/#basic-template-for-tkinter","text":"# Codemy Tkinter YouTube Video 1 # First import tkinter from tkinter import * # Now create the main window. Typically called root but can be named most anything. root = Tk () # Create a couple of label widgets myLabel = Label ( root , text = \"Hello World!\" ) myLabel2 = Label ( root , text = \"Line Two\" ) # Pack the label widgets onto the screen myLabel . pack () myLabel2 . pack () # Create the event loop that waits for user to do things on the screen root . mainloop ()","title":"Basic Template for Tkinter"},{"location":"TKinter/buttons-vid3/","text":"Codemy Tk Buttons YT Vid3 Tkinter Buttons Introduction # Codemy Tkinter YouTube Video 3 # Intro to tkinter buttons # First import tkinter from tkinter import * # Now create the main window. Typically called root but can be named most anything. root = Tk () def myClick (): myLabel = Label ( root , text = \"Look! I clicked a Button!\" ) myLabel . pack () # Like everything in tkinter, a button is a widget. # Can add a state to the button - , state=DISABLED would grey out the button so it can't be clicked # padx makes button wider, pady makes button taller # fg changes foreground color, bg changes background color. Can use name of color or hex color code. # command causes clicking the button to execute a function. Note that you don't use parentheses # to pass parameters to the function. myButton = Button ( root , text = \"Click Me!\" , padx = 50 , pady = 50 , fg = \"blue\" , bg = \"red\" , command = myClick ) myButton . pack () # Create the event loop that waits for user to do things on the screen root . mainloop ()","title":"Codemy Tk Buttons YT Vid3"},{"location":"TKinter/buttons-vid3/#codemy-tk-buttons-yt-vid3","text":"","title":"Codemy Tk Buttons YT Vid3"},{"location":"TKinter/buttons-vid3/#tkinter-buttons-introduction","text":"# Codemy Tkinter YouTube Video 3 # Intro to tkinter buttons # First import tkinter from tkinter import * # Now create the main window. Typically called root but can be named most anything. root = Tk () def myClick (): myLabel = Label ( root , text = \"Look! I clicked a Button!\" ) myLabel . pack () # Like everything in tkinter, a button is a widget. # Can add a state to the button - , state=DISABLED would grey out the button so it can't be clicked # padx makes button wider, pady makes button taller # fg changes foreground color, bg changes background color. Can use name of color or hex color code. # command causes clicking the button to execute a function. Note that you don't use parentheses # to pass parameters to the function. myButton = Button ( root , text = \"Click Me!\" , padx = 50 , pady = 50 , fg = \"blue\" , bg = \"red\" , command = myClick ) myButton . pack () # Create the event loop that waits for user to do things on the screen root . mainloop ()","title":"Tkinter Buttons Introduction"},{"location":"TKinter/calc/","text":"Codemy Tkinter Calculator YT Vid5-7 Build a simple calculator # First import tkinter from tkinter import * # Now create the main window. Typically called root but can be named most anything. root = Tk () # Put a title on the screen root . title ( \"Simple Calculator\" ) # Show results at top of screen e = Entry ( root , width = 35 , borderwidth = 5 ) # Put it at the top and have it span 3 columns e . grid ( row = 0 , column = 0 , columnspan = 3 , padx = 10 , pady = 10 ) def button_click ( number ): # First delete what's aleady in the box current = e . get () e . delete ( 0 , END ) e . insert ( 0 , current + str ( number )) def button_clear (): e . delete ( 0 , END ) def button_add (): first_number = e . get () global f_num global math math = \"addition\" f_num = int ( first_number ) e . delete ( 0 , END ) def button_equal (): second_number = e . get () e . delete ( 0 , END ) if math == \"addition\" : e . insert ( 0 , f_num + int ( second_number )) elif math == \"subtraction\" : e . insert ( 0 , f_num - int ( second_number )) elif math == \"multiplication\" : e . insert ( 0 , f_num * int ( second_number )) elif math == \"division\" : e . insert ( 0 , f_num / int ( second_number )) def button_subtract (): first_number = e . get () global f_num global math math = \"subtraction\" f_num = int ( first_number ) e . delete ( 0 , END ) def button_multiply (): first_number = e . get () global f_num global math math = \"multiplication\" f_num = int ( first_number ) e . delete ( 0 , END ) def button_divide (): first_number = e . get () global f_num global math math = \"division\" f_num = int ( first_number ) e . delete ( 0 , END ) # Need buttons for numbers # Use Lambda to pass parameters button_1 = Button ( root , text = \"1\" , padx = 40 , pady = 20 , command = lambda : button_click ( 1 )) button_2 = Button ( root , text = \"2\" , padx = 40 , pady = 20 , command = lambda : button_click ( 2 )) button_3 = Button ( root , text = \"3\" , padx = 40 , pady = 20 , command = lambda : button_click ( 3 )) button_4 = Button ( root , text = \"4\" , padx = 40 , pady = 20 , command = lambda : button_click ( 4 )) button_5 = Button ( root , text = \"5\" , padx = 40 , pady = 20 , command = lambda : button_click ( 5 )) button_6 = Button ( root , text = \"6\" , padx = 40 , pady = 20 , command = lambda : button_click ( 6 )) button_7 = Button ( root , text = \"7\" , padx = 40 , pady = 20 , command = lambda : button_click ( 7 )) button_8 = Button ( root , text = \"8\" , padx = 40 , pady = 20 , command = lambda : button_click ( 8 )) button_9 = Button ( root , text = \"9\" , padx = 40 , pady = 20 , command = lambda : button_click ( 9 )) button_0 = Button ( root , text = \"0\" , padx = 40 , pady = 20 , command = lambda : button_click ( 0 )) button_add = Button ( root , text = \"+\" , padx = 39 , pady = 20 , command = button_add ) button_equal = Button ( root , text = \"=\" , padx = 91 , pady = 20 , command = button_equal ) button_clear = Button ( root , text = \"Clear\" , padx = 79 , pady = 20 , command = button_clear ) button_subtract = Button ( root , text = \"-\" , padx = 41 , pady = 20 , command = button_subtract ) button_multiply = Button ( root , text = \"*\" , padx = 40 , pady = 20 , command = button_multiply ) button_divide = Button ( root , text = \"/\" , padx = 40 , pady = 20 , command = button_divide ) # Put buttons on screen. button_1 . grid ( row = 3 , column = 0 ) button_2 . grid ( row = 3 , column = 1 ) button_3 . grid ( row = 3 , column = 2 ) button_4 . grid ( row = 2 , column = 0 ) button_5 . grid ( row = 2 , column = 1 ) button_6 . grid ( row = 2 , column = 2 ) button_7 . grid ( row = 1 , column = 0 ) button_8 . grid ( row = 1 , column = 1 ) button_9 . grid ( row = 1 , column = 2 ) button_0 . grid ( row = 4 , column = 0 ) button_clear . grid ( row = 4 , column = 1 , columnspan = 2 ) button_add . grid ( row = 5 , column = 0 ) button_equal . grid ( row = 5 , column = 1 , columnspan = 2 ) button_subtract . grid ( row = 6 , column = 0 ) button_multiply . grid ( row = 6 , column = 1 ) button_divide . grid ( row = 6 , column = 2 ) # Create the event loop that waits for user to do things on the screen root . mainloop ()","title":"Codemy Tkinter Calculator YT Vid5-7"},{"location":"TKinter/calc/#codemy-tkinter-calculator-yt-vid5-7","text":"","title":"Codemy Tkinter Calculator YT Vid5-7"},{"location":"TKinter/calc/#build-a-simple-calculator","text":"# First import tkinter from tkinter import * # Now create the main window. Typically called root but can be named most anything. root = Tk () # Put a title on the screen root . title ( \"Simple Calculator\" ) # Show results at top of screen e = Entry ( root , width = 35 , borderwidth = 5 ) # Put it at the top and have it span 3 columns e . grid ( row = 0 , column = 0 , columnspan = 3 , padx = 10 , pady = 10 ) def button_click ( number ): # First delete what's aleady in the box current = e . get () e . delete ( 0 , END ) e . insert ( 0 , current + str ( number )) def button_clear (): e . delete ( 0 , END ) def button_add (): first_number = e . get () global f_num global math math = \"addition\" f_num = int ( first_number ) e . delete ( 0 , END ) def button_equal (): second_number = e . get () e . delete ( 0 , END ) if math == \"addition\" : e . insert ( 0 , f_num + int ( second_number )) elif math == \"subtraction\" : e . insert ( 0 , f_num - int ( second_number )) elif math == \"multiplication\" : e . insert ( 0 , f_num * int ( second_number )) elif math == \"division\" : e . insert ( 0 , f_num / int ( second_number )) def button_subtract (): first_number = e . get () global f_num global math math = \"subtraction\" f_num = int ( first_number ) e . delete ( 0 , END ) def button_multiply (): first_number = e . get () global f_num global math math = \"multiplication\" f_num = int ( first_number ) e . delete ( 0 , END ) def button_divide (): first_number = e . get () global f_num global math math = \"division\" f_num = int ( first_number ) e . delete ( 0 , END ) # Need buttons for numbers # Use Lambda to pass parameters button_1 = Button ( root , text = \"1\" , padx = 40 , pady = 20 , command = lambda : button_click ( 1 )) button_2 = Button ( root , text = \"2\" , padx = 40 , pady = 20 , command = lambda : button_click ( 2 )) button_3 = Button ( root , text = \"3\" , padx = 40 , pady = 20 , command = lambda : button_click ( 3 )) button_4 = Button ( root , text = \"4\" , padx = 40 , pady = 20 , command = lambda : button_click ( 4 )) button_5 = Button ( root , text = \"5\" , padx = 40 , pady = 20 , command = lambda : button_click ( 5 )) button_6 = Button ( root , text = \"6\" , padx = 40 , pady = 20 , command = lambda : button_click ( 6 )) button_7 = Button ( root , text = \"7\" , padx = 40 , pady = 20 , command = lambda : button_click ( 7 )) button_8 = Button ( root , text = \"8\" , padx = 40 , pady = 20 , command = lambda : button_click ( 8 )) button_9 = Button ( root , text = \"9\" , padx = 40 , pady = 20 , command = lambda : button_click ( 9 )) button_0 = Button ( root , text = \"0\" , padx = 40 , pady = 20 , command = lambda : button_click ( 0 )) button_add = Button ( root , text = \"+\" , padx = 39 , pady = 20 , command = button_add ) button_equal = Button ( root , text = \"=\" , padx = 91 , pady = 20 , command = button_equal ) button_clear = Button ( root , text = \"Clear\" , padx = 79 , pady = 20 , command = button_clear ) button_subtract = Button ( root , text = \"-\" , padx = 41 , pady = 20 , command = button_subtract ) button_multiply = Button ( root , text = \"*\" , padx = 40 , pady = 20 , command = button_multiply ) button_divide = Button ( root , text = \"/\" , padx = 40 , pady = 20 , command = button_divide ) # Put buttons on screen. button_1 . grid ( row = 3 , column = 0 ) button_2 . grid ( row = 3 , column = 1 ) button_3 . grid ( row = 3 , column = 2 ) button_4 . grid ( row = 2 , column = 0 ) button_5 . grid ( row = 2 , column = 1 ) button_6 . grid ( row = 2 , column = 2 ) button_7 . grid ( row = 1 , column = 0 ) button_8 . grid ( row = 1 , column = 1 ) button_9 . grid ( row = 1 , column = 2 ) button_0 . grid ( row = 4 , column = 0 ) button_clear . grid ( row = 4 , column = 1 , columnspan = 2 ) button_add . grid ( row = 5 , column = 0 ) button_equal . grid ( row = 5 , column = 1 , columnspan = 2 ) button_subtract . grid ( row = 6 , column = 0 ) button_multiply . grid ( row = 6 , column = 1 ) button_divide . grid ( row = 6 , column = 2 ) # Create the event loop that waits for user to do things on the screen root . mainloop ()","title":"Build a simple calculator"},{"location":"TKinter/grid_positioning-vid2/","text":"Codemy Tk Grid YT Vid2 Grid System Introduction # Codemy Tkinter YouTube Video 2 # Intro to the Grid System - position like on a spreadsheet # First import tkinter from tkinter import * # Now create the main window. Typically called root but can be named most anything. root = Tk () # Create a couple of label widgets myLabel1 = Label ( root , text = \"Hello World!\" ) myLabel2 = Label ( root , text = \"My Name is Terry Dutcher\" ) # Put the label widgets onto the screen using the Grid System. # Grid system rows and columns both start with zero. # These are relative to each other - so if change myLabel2 to column 5 makes no difference # Since columns 1,2,3,4 would be empty. myLabel1 . grid ( row = 0 , column = 0 ) myLabel2 . grid ( row = 1 , column = 1 ) # Create the event loop that waits for user to do things on the screen root . mainloop ()","title":"Codemy Tk Grid YT Vid2"},{"location":"TKinter/grid_positioning-vid2/#codemy-tk-grid-yt-vid2","text":"","title":"Codemy Tk Grid YT Vid2"},{"location":"TKinter/grid_positioning-vid2/#grid-system-introduction","text":"# Codemy Tkinter YouTube Video 2 # Intro to the Grid System - position like on a spreadsheet # First import tkinter from tkinter import * # Now create the main window. Typically called root but can be named most anything. root = Tk () # Create a couple of label widgets myLabel1 = Label ( root , text = \"Hello World!\" ) myLabel2 = Label ( root , text = \"My Name is Terry Dutcher\" ) # Put the label widgets onto the screen using the Grid System. # Grid system rows and columns both start with zero. # These are relative to each other - so if change myLabel2 to column 5 makes no difference # Since columns 1,2,3,4 would be empty. myLabel1 . grid ( row = 0 , column = 0 ) myLabel2 . grid ( row = 1 , column = 1 ) # Create the event loop that waits for user to do things on the screen root . mainloop ()","title":"Grid System Introduction"},{"location":"TKinter/input_fields-vid4/","text":"Codemy Tk Entry Fields YT Vid4 Intro to tkinter entry fields # First import tkinter from tkinter import * # Now create the main window. Typically called root but can be named most anything. root = Tk () # input boxes are called entry widgets in tkinter # Can set colors, width etc just like with other widgets. # Borderwidth usable on entry widget. e = Entry ( root ) e . pack () # .insert() lets you put a default value in the entry box # 0 means the zeroth box, not sure when you would use anything other than zero e . insert ( 0 , \"Enter Your Name:\" ) # .get() function gets text from the box. def myClick (): myLabel = Label ( root , text = \"Hello \" + e . get ()) myLabel . pack () myButton = Button ( root , text = \"Enter Your Name!\" , command = myClick ) myButton . pack () # Create the event loop that waits for user to do things on the screen root . mainloop ()","title":"Codemy Tk Entry Fields YT Vid4"},{"location":"TKinter/input_fields-vid4/#codemy-tk-entry-fields-yt-vid4","text":"","title":"Codemy Tk Entry Fields YT Vid4"},{"location":"TKinter/input_fields-vid4/#intro-to-tkinter-entry-fields","text":"# First import tkinter from tkinter import * # Now create the main window. Typically called root but can be named most anything. root = Tk () # input boxes are called entry widgets in tkinter # Can set colors, width etc just like with other widgets. # Borderwidth usable on entry widget. e = Entry ( root ) e . pack () # .insert() lets you put a default value in the entry box # 0 means the zeroth box, not sure when you would use anything other than zero e . insert ( 0 , \"Enter Your Name:\" ) # .get() function gets text from the box. def myClick (): myLabel = Label ( root , text = \"Hello \" + e . get ()) myLabel . pack () myButton = Button ( root , text = \"Enter Your Name!\" , command = myClick ) myButton . pack () # Create the event loop that waits for user to do things on the screen root . mainloop ()","title":"Intro to tkinter entry fields"},{"location":"TKinter/virtual_environment/","text":"Create a Virtual Environment In the youtube videos he doesn't mention a virtual environment, but in the videos on his own Codemy.com site, he suggests using a virtual environment. Initialize it python -m venv name_of_virtual_environment Activate it: source name_of_virtual_environment/bin/activate Deactivate it: deactivate","title":"Virtual environment"},{"location":"TKinter/virtual_environment/#create-a-virtual-environment","text":"In the youtube videos he doesn't mention a virtual environment, but in the videos on his own Codemy.com site, he suggests using a virtual environment. Initialize it python -m venv name_of_virtual_environment Activate it: source name_of_virtual_environment/bin/activate Deactivate it: deactivate","title":"Create a Virtual Environment"},{"location":"TKinter/Before_Start_Over/basic_template/","text":"Tkinter Basic Template Basic Template from Codemy.com YouTube # Import all of tkinter from tkinter import * # Create root window - Main window of your applicaton usually called root, but # doesn't have to be. Has to be first in program. root = Tk () # Create a label widget myLabel = Label ( root , text = \"Hello World!\" ) # Now pack it into the window. myLabel . pack () # Create event loop root . mainloop () Different way of importing tkinter # import tkinter module import tkinter as tk # Create a tkinter instance root is customary but can name it anything. root = tk . Tk () # Put a caption or title on our window root . title ( \"Hello World!\" ) # Set the size of the window root . geometry ( \"400x400\" ) # And the main event loop root . mainloop ()","title":"Basic template"},{"location":"TKinter/Before_Start_Over/basic_template/#tkinter-basic-template","text":"Basic Template from Codemy.com YouTube # Import all of tkinter from tkinter import * # Create root window - Main window of your applicaton usually called root, but # doesn't have to be. Has to be first in program. root = Tk () # Create a label widget myLabel = Label ( root , text = \"Hello World!\" ) # Now pack it into the window. myLabel . pack () # Create event loop root . mainloop () Different way of importing tkinter # import tkinter module import tkinter as tk # Create a tkinter instance root is customary but can name it anything. root = tk . Tk () # Put a caption or title on our window root . title ( \"Hello World!\" ) # Set the size of the window root . geometry ( \"400x400\" ) # And the main event loop root . mainloop ()","title":"Tkinter Basic Template"},{"location":"TKinter/Before_Start_Over/buttons/","text":"Buttons in Tkinter Codemy.com Youtube Video 3 # Import all of tkinter from tkinter import * # Create root window - Main window of your applicaton usually called root, but # doesn't have to be. Has to be first in program. root = Tk () # Create a button. Need a function that the button calls first. def myClick (): myLabel = Label ( root , text = \"You clicked the Button!!\" ) myLabel . pack () # Use command= to call a function. Notice that there are no parentheses # for parameters. myButton = Button ( root , text = \"Click Me!\" , command = myClick ) # To pass parameters use lambda my_button = Button ( root , text = \"Click Me\" , command = lambda : myClick ( param )) # Change the foreground color with fg and background color with bg # Can also use hex codes bg=\"#ffffff\" or fg=\"#000000\" myButton = Button ( root , text = \"Click Me!\" , command = myClick , fg = \"blue\" , bg = \"orange\" ) # Add padding which is inside the button borders # myButton = Button(root, text=\"Click Me!\", padx=50, pady=50) # if you want the button grayed out so it can't be clicked: # myButton = Button(root, text=\"Click Me!\", state=DISABLED) myButton . pack () # Create event loop root . mainloop () Older Notes Normal format root is the container where you want the button, text is what is displayed on the button, command points to the function that needs to be executed when the button is clicked. myButton = tk.Button(root, text=\"Click Me!\", command = myClick) Note that you don't include parentheses on the function call.","title":"Buttons"},{"location":"TKinter/Before_Start_Over/buttons/#buttons-in-tkinter","text":"Codemy.com Youtube Video 3 # Import all of tkinter from tkinter import * # Create root window - Main window of your applicaton usually called root, but # doesn't have to be. Has to be first in program. root = Tk () # Create a button. Need a function that the button calls first. def myClick (): myLabel = Label ( root , text = \"You clicked the Button!!\" ) myLabel . pack () # Use command= to call a function. Notice that there are no parentheses # for parameters. myButton = Button ( root , text = \"Click Me!\" , command = myClick ) # To pass parameters use lambda my_button = Button ( root , text = \"Click Me\" , command = lambda : myClick ( param )) # Change the foreground color with fg and background color with bg # Can also use hex codes bg=\"#ffffff\" or fg=\"#000000\" myButton = Button ( root , text = \"Click Me!\" , command = myClick , fg = \"blue\" , bg = \"orange\" ) # Add padding which is inside the button borders # myButton = Button(root, text=\"Click Me!\", padx=50, pady=50) # if you want the button grayed out so it can't be clicked: # myButton = Button(root, text=\"Click Me!\", state=DISABLED) myButton . pack () # Create event loop root . mainloop () Older Notes Normal format root is the container where you want the button, text is what is displayed on the button, command points to the function that needs to be executed when the button is clicked. myButton = tk.Button(root, text=\"Click Me!\", command = myClick) Note that you don't include parentheses on the function call.","title":"Buttons in Tkinter"},{"location":"TKinter/Before_Start_Over/calc_pseudo_code/","text":"Tkinter Calculator Pseudo Code Variables I think I need: Current_value - what's currently in the entry box Current-sub-total - result of whatever I've done up to now. Current Operation - adding, subtract, multiply, divide Initialize: Put a zero in the entry box and current sub total and current value Set current operation to Addition Event Loop: If a number is clicked: Becomes the right most digit of entry_box and current_value If + is clicked add current-value to current-sub-total clear entry box and set current-value to 0 set current-operation to addition If = is clicked if current-operation is addition add current-value to current-sub-total display current-sub-total","title":"Calc pseudo code"},{"location":"TKinter/Before_Start_Over/calc_pseudo_code/#tkinter-calculator-pseudo-code","text":"Variables I think I need: Current_value - what's currently in the entry box Current-sub-total - result of whatever I've done up to now. Current Operation - adding, subtract, multiply, divide Initialize: Put a zero in the entry box and current sub total and current value Set current operation to Addition Event Loop: If a number is clicked: Becomes the right most digit of entry_box and current_value If + is clicked add current-value to current-sub-total clear entry box and set current-value to 0 set current-operation to addition If = is clicked if current-operation is addition add current-value to current-sub-total display current-sub-total","title":"Tkinter Calculator Pseudo Code"},{"location":"TKinter/Before_Start_Over/calc_with_eval_pseudo_code/","text":"Pseudo Code for Tkinter Calculator using Eval Statement Setup stringToEvaluate = \"\" Function to handles numbers and decimal point Just append the number or decimal point to the stringToEvaluate variable Called with parameter that's either a number or a decimal point. Strings in either case. global stringToEvaluate stringToEvaluate = stringToEvaluate + parameter Function with math operator Evaluate what's in stringToEvaluate and then append the math operator we got to it and put it back in stringToEvaluate Called with a parameter that's a 1 character string of +, -, *, or / global stringToEvaluate if current stringToEvaluate is \"\" (empty like I originally set it) only the minus sign makes sense. if","title":"Pseudo Code for Tkinter Calculator using Eval Statement"},{"location":"TKinter/Before_Start_Over/calc_with_eval_pseudo_code/#pseudo-code-for-tkinter-calculator-using-eval-statement","text":"","title":"Pseudo Code for Tkinter Calculator using Eval Statement"},{"location":"TKinter/Before_Start_Over/calc_with_eval_pseudo_code/#setup","text":"stringToEvaluate = \"\"","title":"Setup"},{"location":"TKinter/Before_Start_Over/calc_with_eval_pseudo_code/#function-to-handles-numbers-and-decimal-point","text":"","title":"Function to handles numbers and decimal point"},{"location":"TKinter/Before_Start_Over/calc_with_eval_pseudo_code/#just-append-the-number-or-decimal-point-to-the-stringtoevaluate-variable","text":"Called with parameter that's either a number or a decimal point. Strings in either case. global stringToEvaluate stringToEvaluate = stringToEvaluate + parameter","title":"Just append the number or decimal point to the stringToEvaluate variable"},{"location":"TKinter/Before_Start_Over/calc_with_eval_pseudo_code/#function-with-math-operator","text":"","title":"Function with math operator"},{"location":"TKinter/Before_Start_Over/calc_with_eval_pseudo_code/#evaluate-whats-in-stringtoevaluate-and-then-append-the-math-operator-we-got-to-it-and-put-it-back-in-stringtoevaluate","text":"Called with a parameter that's a 1 character string of +, -, *, or / global stringToEvaluate if current stringToEvaluate is \"\" (empty like I originally set it) only the minus sign makes sense. if","title":"Evaluate what's in stringToEvaluate and then append the math operator we got to it and put it back in stringToEvaluate"},{"location":"TKinter/Before_Start_Over/common_properties/","text":"Common Properties in Tkinter padx, pady both put space inside the widget but outside the text state mostly used for buttons - disable will grey out the button. fg = foreground color, can use named colors and hex codes bg = background color, can use named colors and hex codes border_width = integer, width of the border","title":"Common properties"},{"location":"TKinter/Before_Start_Over/common_properties/#common-properties-in-tkinter","text":"padx, pady both put space inside the widget but outside the text state mostly used for buttons - disable will grey out the button. fg = foreground color, can use named colors and hex codes bg = background color, can use named colors and hex codes border_width = integer, width of the border","title":"Common Properties in Tkinter"},{"location":"TKinter/Before_Start_Over/entry/","text":"Tkinter Entry Widget Codemy Tkinter Video 10 Buttons Input fields are called entry fields. # Create an entry box e = Entry ( root , width = 300 ) # To change the height, change the fontsize e = Entry ( root , width = 300 , font = ( \"Helvetica\" , 32 ) # to read the value, e.g. after a button is pressed input = e . get () my_label2 = Label ( root , text = \"Hello \" + input ) Codemy.com Youtube Video 4 # Import all of tkinter from tkinter import * # Create root window - Main window of your applicaton usually called root, but # doesn't have to be. Has to be first in program. root = Tk () # Create an entry widiget and call it e # width is the size of the input box in characters. Can change the borderwidth on # all of these widgets. e = Entry ( root , width = 50 , borderwidth = 5 ) # Can put default text in the box (it's box 0, I assume we'll get to that later) # You have to clear the text before typing. e . insert ( 0 , \"Enter Your Name:\" ) e . pack () # Create a button. Need a function that the button calls first. def myClick (): # e.get gets whatever character the entry box contains # myLabel = Label(root, text=\"Hello \" + e.get()) # Or you can put the contents of the entry box in a variable name = e . get () myLabel = Label ( root , text = \"Hello \" + name ) myLabel . pack () myButton = Button ( root , text = \"Enter Your Name\" , command = myClick ) myButton . pack () # Create event loop root . mainloop () Previous Notes Allows user to enter data. e = tk . Entry ( root , width = 50 ) e . delete ( 0 , END ) # Clears the box e . insert ( 0 , \"Enter Your Data\" ) # Puts default data in the entry box, 0 he didn't explain text_from_entry = e . get ()","title":"Tkinter Entry Widget"},{"location":"TKinter/Before_Start_Over/entry/#tkinter-entry-widget","text":"","title":"Tkinter Entry Widget"},{"location":"TKinter/Before_Start_Over/entry/#codemy-tkinter-video-10-buttons","text":"Input fields are called entry fields. # Create an entry box e = Entry ( root , width = 300 ) # To change the height, change the fontsize e = Entry ( root , width = 300 , font = ( \"Helvetica\" , 32 ) # to read the value, e.g. after a button is pressed input = e . get () my_label2 = Label ( root , text = \"Hello \" + input ) Codemy.com Youtube Video 4 # Import all of tkinter from tkinter import * # Create root window - Main window of your applicaton usually called root, but # doesn't have to be. Has to be first in program. root = Tk () # Create an entry widiget and call it e # width is the size of the input box in characters. Can change the borderwidth on # all of these widgets. e = Entry ( root , width = 50 , borderwidth = 5 ) # Can put default text in the box (it's box 0, I assume we'll get to that later) # You have to clear the text before typing. e . insert ( 0 , \"Enter Your Name:\" ) e . pack () # Create a button. Need a function that the button calls first. def myClick (): # e.get gets whatever character the entry box contains # myLabel = Label(root, text=\"Hello \" + e.get()) # Or you can put the contents of the entry box in a variable name = e . get () myLabel = Label ( root , text = \"Hello \" + name ) myLabel . pack () myButton = Button ( root , text = \"Enter Your Name\" , command = myClick ) myButton . pack () # Create event loop root . mainloop () Previous Notes Allows user to enter data. e = tk . Entry ( root , width = 50 ) e . delete ( 0 , END ) # Clears the box e . insert ( 0 , \"Enter Your Data\" ) # Puts default data in the entry box, 0 he didn't explain text_from_entry = e . get ()","title":"Codemy Tkinter Video 10 Buttons"},{"location":"TKinter/Before_Start_Over/favicon/","text":"Favicons Codemy Video 12 Tkinter Favicon His method only works in Windows. This example from my GT Calculator program. In this case the png file is in the same folder as the program. calc . iconphoto ( False , tk . PhotoImage ( file = 'calculator.png' ))","title":"Favicon"},{"location":"TKinter/Before_Start_Over/favicon/#favicons","text":"","title":"Favicons"},{"location":"TKinter/Before_Start_Over/favicon/#codemy-video-12-tkinter-favicon","text":"His method only works in Windows. This example from my GT Calculator program. In this case the png file is in the same folder as the program. calc . iconphoto ( False , tk . PhotoImage ( file = 'calculator.png' ))","title":"Codemy Video 12 Tkinter Favicon"},{"location":"TKinter/Before_Start_Over/forget_destroy/","text":"Forget and Destroy Codemy Video 14 Pack/Grid Forget and Destroy Two ways to have a widget not appear on the screen. One if you want it back, another if you're sure you're done with it. # Function to Hide the widget def hide (): global my_label2 my_label2 . pack_forget () def show (): global my_label2 # reshow a label that's already been created, but has been hidden. my_label2 . pack () # or completely get rid of it. Would have to be recreated to reappear my_label2 . destroy ()","title":"Forget and Destroy"},{"location":"TKinter/Before_Start_Over/forget_destroy/#forget-and-destroy","text":"","title":"Forget and Destroy"},{"location":"TKinter/Before_Start_Over/forget_destroy/#codemy-video-14-packgrid-forget-and-destroy","text":"Two ways to have a widget not appear on the screen. One if you want it back, another if you're sure you're done with it. # Function to Hide the widget def hide (): global my_label2 my_label2 . pack_forget () def show (): global my_label2 # reshow a label that's already been created, but has been hidden. my_label2 . pack () # or completely get rid of it. Would have to be recreated to reappear my_label2 . destroy ()","title":"Codemy Video 14 Pack/Grid Forget and Destroy"},{"location":"TKinter/Before_Start_Over/grid/","text":"Tkinter Grid System Codemy Video 8 Pack vs. Grid You can use both pack and grid at the same time but until you're advanced, don't! Grid is laid out in rows and columns like a spreadsheet. # Comments start with a # sign. # examples of grid commands after creating labels. my_label . grid ( row = 0 , column = 0 ) my_label2 . grid ( row = 1 , column = 0 ) # This goes at the bottom of the program and creates the event loop. root . mainloop () Codemy Tkinter Video 9 Grid Options Size of a row or column defaults to the size of the largest widget in that row or column. Other widgets in that row or column default to centered. But you can change that using the sticky option and compass directions. # Use E, W, N, S for right, left, top, bottom my_label2 . grid ( row = 1 , column = 0 , sticky = W ) Column span and row span lets one cell span a row or column my_label . grid ( row = 0 , column = 0 , columnspan = 2 ) Codemy.com Youtube Video 2 # Import all of tkinter from tkinter import * # Create root window - Main window of your applicaton usually called root, but # doesn't have to be. Has to be first in program. root = Tk () # Create 2 label widgets myLabel1 = Label ( root , text = \"Hello World!\" ) myLabel2 = Label ( root , text = \"My Name is Terry\" ) # First put it into the window in a grid one on top of the other. myLabel1 . grid ( row = 0 , column = 0 ) # myLabel2.grid(row=1, column=0) # Now try Label2 in column 1 # myLabel2.grid(row=1, column=1) # Now put Label2 in column 5 and notice that nothing changes # Columns are relative to each other and since columns 1-4 don't exist # Tkinter ignores them. myLabel2 . grid ( row = 1 , column = 5 ) # Create event loop root . mainloop () Older Notes Typical grid - rows and columns. Both are numbered from zero. # Create two label widgets myLabel1 = tk . Label ( root , text = \"Line 1\" ) myLabel2 = tk . Label ( root , text = \"Line 2\" ) myLabel1 . grid ( row = 0 , column = 0 ) myLabel2 . grid ( row = 1 , column = 0 ) The rows and columns are relative to each other if you put myLabel2 into column 1 or column 5 it's in the column next to column 0. Tkinter just ignores empty columns or rows.","title":"Grid"},{"location":"TKinter/Before_Start_Over/grid/#tkinter-grid-system","text":"","title":"Tkinter Grid System"},{"location":"TKinter/Before_Start_Over/grid/#codemy-video-8-pack-vs-grid","text":"You can use both pack and grid at the same time but until you're advanced, don't! Grid is laid out in rows and columns like a spreadsheet. # Comments start with a # sign. # examples of grid commands after creating labels. my_label . grid ( row = 0 , column = 0 ) my_label2 . grid ( row = 1 , column = 0 ) # This goes at the bottom of the program and creates the event loop. root . mainloop ()","title":"Codemy Video 8 Pack vs. Grid"},{"location":"TKinter/Before_Start_Over/grid/#codemy-tkinter-video-9-grid-options","text":"Size of a row or column defaults to the size of the largest widget in that row or column. Other widgets in that row or column default to centered. But you can change that using the sticky option and compass directions. # Use E, W, N, S for right, left, top, bottom my_label2 . grid ( row = 1 , column = 0 , sticky = W ) Column span and row span lets one cell span a row or column my_label . grid ( row = 0 , column = 0 , columnspan = 2 ) Codemy.com Youtube Video 2 # Import all of tkinter from tkinter import * # Create root window - Main window of your applicaton usually called root, but # doesn't have to be. Has to be first in program. root = Tk () # Create 2 label widgets myLabel1 = Label ( root , text = \"Hello World!\" ) myLabel2 = Label ( root , text = \"My Name is Terry\" ) # First put it into the window in a grid one on top of the other. myLabel1 . grid ( row = 0 , column = 0 ) # myLabel2.grid(row=1, column=0) # Now try Label2 in column 1 # myLabel2.grid(row=1, column=1) # Now put Label2 in column 5 and notice that nothing changes # Columns are relative to each other and since columns 1-4 don't exist # Tkinter ignores them. myLabel2 . grid ( row = 1 , column = 5 ) # Create event loop root . mainloop () Older Notes Typical grid - rows and columns. Both are numbered from zero. # Create two label widgets myLabel1 = tk . Label ( root , text = \"Line 1\" ) myLabel2 = tk . Label ( root , text = \"Line 2\" ) myLabel1 . grid ( row = 0 , column = 0 ) myLabel2 . grid ( row = 1 , column = 0 ) The rows and columns are relative to each other if you put myLabel2 into column 1 or column 5 it's in the column next to column 0. Tkinter just ignores empty columns or rows.","title":"Codemy Tkinter Video 9 Grid Options"},{"location":"TKinter/Before_Start_Over/images/","text":"Images Codemy Video 13 Images Don't use what's built into Python. It's very out of date. # Make sure you're in the correct directory and your venv is active. pip [ 3 ] install Pillow # Imports needed for images from PIL import ImageTk , Image # You can add an image to almost any widget # png and jpg both work my_image = ImageTk . PhotoImage ( Image . open ( \"images/testimage.png\" ) image_label = Label ( image = by_image ) image_label . pack ()","title":"Images"},{"location":"TKinter/Before_Start_Over/images/#images","text":"","title":"Images"},{"location":"TKinter/Before_Start_Over/images/#codemy-video-13-images","text":"Don't use what's built into Python. It's very out of date. # Make sure you're in the correct directory and your venv is active. pip [ 3 ] install Pillow # Imports needed for images from PIL import ImageTk , Image # You can add an image to almost any widget # png and jpg both work my_image = ImageTk . PhotoImage ( Image . open ( \"images/testimage.png\" ) image_label = Label ( image = by_image ) image_label . pack ()","title":"Codemy Video 13 Images"},{"location":"TKinter/Before_Start_Over/label/","text":"Codemy Video 6 Labels Labels put text on the tkinter screen. Pretty much everything in tkinter is a widget. Putting a widget on the screen is a 2 step process. You create the widget and then you put it on the screen with pack, grid, etc. Pack is the easiest, but doesn't give you much control. He uses the grid system mostly. # first import the tkinter module from tkinter import * # Create instance of tkinter. Doesn't have to be root, any valid python # variable name. But it's the root window. root = Tk () # Window title root . title ( \"Hello World!\" ) # Set the size of our window root . geometry ( \"400x400\" ) # Create a basic label my_label = Label ( root , text = \"Hello World!\" ) my_label . pack () my_label2 = Label ( root , text = \"Second Label!\" ) my_label2 . pack () # This goes at the bottom of the program and creates the event loop. root . mainloop () Tkinter Labels # Create the label widget myLabel = tk.Label(root, text=\"Hello World!\") # Pack it on the screen myLabel.pack()","title":"Codemy Video 6 Labels"},{"location":"TKinter/Before_Start_Over/label/#codemy-video-6-labels","text":"Labels put text on the tkinter screen. Pretty much everything in tkinter is a widget. Putting a widget on the screen is a 2 step process. You create the widget and then you put it on the screen with pack, grid, etc. Pack is the easiest, but doesn't give you much control. He uses the grid system mostly. # first import the tkinter module from tkinter import * # Create instance of tkinter. Doesn't have to be root, any valid python # variable name. But it's the root window. root = Tk () # Window title root . title ( \"Hello World!\" ) # Set the size of our window root . geometry ( \"400x400\" ) # Create a basic label my_label = Label ( root , text = \"Hello World!\" ) my_label . pack () my_label2 = Label ( root , text = \"Second Label!\" ) my_label2 . pack () # This goes at the bottom of the program and creates the event loop. root . mainloop ()","title":"Codemy Video 6 Labels"},{"location":"TKinter/Before_Start_Over/label/#tkinter-labels","text":"# Create the label widget myLabel = tk.Label(root, text=\"Hello World!\") # Pack it on the screen myLabel.pack()","title":"Tkinter Labels"},{"location":"TKinter/Before_Start_Over/label_options/","text":"Codemy Video 7 Label Options Applicable to almost all widgets # Change the foreground and background colors. Can also use hex codes. my_label = Label ( root , text = \"Hello World!\" , fg = \"white\" , bg = \"black\" ) my_label . pack () # Change the font and relief (flat [default], sunken, raised, groove and ridge) my_label2 = Label ( root , text = \"Second Label!\" , font = ( \"Arial\" , 32 ), relief = \"sunken\" ) my_label2 . pack () # Change the state - more often used for buttons. Normal is default, disabled grays out the text. my_label3 = Label ( root , text = \"Third Label!\" , state = \"disabled\" ) my_label3 . pack () # Change height and width, makes more sense in grid than pack. my_label4 = Label ( root , text = \"Fourth Label!\" , height = 200 , width = 200 ) # Can change padding in pack statement my_label4 . pack ( pady = 50 , padx = 20 ) # This goes at the bottom of the program and creates the event loop. root . mainloop ()","title":"Codemy Video 7 Label Options"},{"location":"TKinter/Before_Start_Over/label_options/#codemy-video-7-label-options","text":"Applicable to almost all widgets # Change the foreground and background colors. Can also use hex codes. my_label = Label ( root , text = \"Hello World!\" , fg = \"white\" , bg = \"black\" ) my_label . pack () # Change the font and relief (flat [default], sunken, raised, groove and ridge) my_label2 = Label ( root , text = \"Second Label!\" , font = ( \"Arial\" , 32 ), relief = \"sunken\" ) my_label2 . pack () # Change the state - more often used for buttons. Normal is default, disabled grays out the text. my_label3 = Label ( root , text = \"Third Label!\" , state = \"disabled\" ) my_label3 . pack () # Change height and width, makes more sense in grid than pack. my_label4 = Label ( root , text = \"Fourth Label!\" , height = 200 , width = 200 ) # Can change padding in pack statement my_label4 . pack ( pady = 50 , padx = 20 ) # This goes at the bottom of the program and creates the event loop. root . mainloop ()","title":"Codemy Video 7 Label Options"},{"location":"TKinter/Before_Start_Over/menus/","text":"Menus Codemy Video 15 Menus Part 1 # Create a menu with a single sub menu my_menu = Menu ( root ) root . config ( menu = my_menu ) # Create the sub menu file_menu = Menu ( my_menu ) # add an item to the submenu my_meny . add_cascade ( label - \"File\" , menu = file_menu ) file_menu . add_command ( label = \"New\" , command = fake_function ) file_menu . add_command ( label = \"Exit\" , command = root . quit ) # To add a seperator to a menu file_menu . add_seperator () Codemy Video 16 Menus Part 2 # Create a menu with a single sub menu my_menu = Menu ( root ) root . config ( menu = my_menu ) # Create the sub menu file_menu = Menu ( my_menu ) # add an item to the submenu my_meny . add_cascade ( label - \"File\" , menu = file_menu ) file_menu . add_command ( label = \"New\" , command = fake_function ) file_menu . add_command ( label = \"Exit\" , command = root . quit ) # To add a seperator to a menu file_menu . add_separator () This code adds another sub menu - an Edit menu # Create the edit menu edit_menu = Menu ( my_menu ) # Create the main heading my_menu . add_cascade ( label = \"Edit\" , menu = edit_menu ) # Add these items to the menu edit_menu . add_command ( label = \"Cut\" , command = \"cut_function\" ) edit_menu . add_command ( label = \"Copy\" , command = \"copy_function\" ) edit_menu . add_command ( label = \"Paste\" , command = \"paste_function\" )","title":"Menus"},{"location":"TKinter/Before_Start_Over/menus/#menus","text":"","title":"Menus"},{"location":"TKinter/Before_Start_Over/menus/#codemy-video-15-menus-part-1","text":"# Create a menu with a single sub menu my_menu = Menu ( root ) root . config ( menu = my_menu ) # Create the sub menu file_menu = Menu ( my_menu ) # add an item to the submenu my_meny . add_cascade ( label - \"File\" , menu = file_menu ) file_menu . add_command ( label = \"New\" , command = fake_function ) file_menu . add_command ( label = \"Exit\" , command = root . quit ) # To add a seperator to a menu file_menu . add_seperator ()","title":"Codemy Video 15 Menus Part 1"},{"location":"TKinter/Before_Start_Over/menus/#codemy-video-16-menus-part-2","text":"# Create a menu with a single sub menu my_menu = Menu ( root ) root . config ( menu = my_menu ) # Create the sub menu file_menu = Menu ( my_menu ) # add an item to the submenu my_meny . add_cascade ( label - \"File\" , menu = file_menu ) file_menu . add_command ( label = \"New\" , command = fake_function ) file_menu . add_command ( label = \"Exit\" , command = root . quit ) # To add a seperator to a menu file_menu . add_separator () This code adds another sub menu - an Edit menu # Create the edit menu edit_menu = Menu ( my_menu ) # Create the main heading my_menu . add_cascade ( label = \"Edit\" , menu = edit_menu ) # Add these items to the menu edit_menu . add_command ( label = \"Cut\" , command = \"cut_function\" ) edit_menu . add_command ( label = \"Copy\" , command = \"copy_function\" ) edit_menu . add_command ( label = \"Paste\" , command = \"paste_function\" )","title":"Codemy Video 16 Menus Part 2"},{"location":"TKinter/Before_Start_Over/quit_button/","text":"Tkinter Quit Button button_quit = tk . Button ( root , text = \"Quit Program\" , command = root , quit ) button_quit . pack ()","title":"Tkinter Quit Button"},{"location":"TKinter/Before_Start_Over/quit_button/#tkinter-quit-button","text":"button_quit = tk . Button ( root , text = \"Quit Program\" , command = root , quit ) button_quit . pack ()","title":"Tkinter Quit Button"},{"location":"TKinter/Before_Start_Over/windows/","text":"Tkinter Windows Colors # multiple ways to set background color my_window . configure ( background = 'red' ) my_window . configure ( bg = 'red' ) my_window . configure ( bg = '#ff0000' ) Fixed Size Window my_window . resizable ( width = False , height = False ) # window can be minimized, but not maximized. my_window . resizable ( width = True , height = False ) # only width can be changed. Maximize button will maximize width and not change the height. my_window . resizable ( width = False , height = True ) # works same for only height resizable. Location # Uses geometry method # coordinates start at 0,0 in top left corner and increase across and down the screen # positions are the top left corner of the window. my_window . geometry ( \"200x100+0+0\" ) # String is width, height, x position, y position # if you calculate integer variables for width, height, x, y you need to format them to a string. # the %d gets replaced with a value and the x and pluses are treated as strings and not changed. my_window . geometry ( \" %d x %d + %d + %d \" % ( width_of_window , height_of_window , x_coordinate , y_coordinate )) Size # Window size attribute can also be set by the configure method. my_window . configure ( width = 400 , height = 200 , background = \"#94d42b\" ) # Or use the geometry method my_window . geometry ( \"200x100\" ) # Note this is a string that's passed to the geometry method. Title my_window . title ( \"Demo1\" ) Window Information height = winfo_screenheight () # gets the height of the window width = winfo_screenwidth () # gets the width of the window.","title":"Tkinter Windows"},{"location":"TKinter/Before_Start_Over/windows/#tkinter-windows","text":"","title":"Tkinter Windows"},{"location":"TKinter/Before_Start_Over/windows/#colors","text":"# multiple ways to set background color my_window . configure ( background = 'red' ) my_window . configure ( bg = 'red' ) my_window . configure ( bg = '#ff0000' )","title":"Colors"},{"location":"TKinter/Before_Start_Over/windows/#fixed-size-window","text":"my_window . resizable ( width = False , height = False ) # window can be minimized, but not maximized. my_window . resizable ( width = True , height = False ) # only width can be changed. Maximize button will maximize width and not change the height. my_window . resizable ( width = False , height = True ) # works same for only height resizable.","title":"Fixed Size Window"},{"location":"TKinter/Before_Start_Over/windows/#location","text":"# Uses geometry method # coordinates start at 0,0 in top left corner and increase across and down the screen # positions are the top left corner of the window. my_window . geometry ( \"200x100+0+0\" ) # String is width, height, x position, y position # if you calculate integer variables for width, height, x, y you need to format them to a string. # the %d gets replaced with a value and the x and pluses are treated as strings and not changed. my_window . geometry ( \" %d x %d + %d + %d \" % ( width_of_window , height_of_window , x_coordinate , y_coordinate ))","title":"Location"},{"location":"TKinter/Before_Start_Over/windows/#size","text":"# Window size attribute can also be set by the configure method. my_window . configure ( width = 400 , height = 200 , background = \"#94d42b\" ) # Or use the geometry method my_window . geometry ( \"200x100\" ) # Note this is a string that's passed to the geometry method.","title":"Size"},{"location":"TKinter/Before_Start_Over/windows/#title","text":"my_window . title ( \"Demo1\" )","title":"Title"},{"location":"TKinter/Before_Start_Over/windows/#window-information","text":"height = winfo_screenheight () # gets the height of the window width = winfo_screenwidth () # gets the width of the window.","title":"Window Information"}]}
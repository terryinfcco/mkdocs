{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Grandpa Terry's Personal Knowledge Base (Sounds pompous doesn't it?) Basically a place to grab the stuff I'm trying to learn from books, Udemy, Youtube, and the Web in general. To work with this mkdocs site: add or edit the files inside the docs folder mkdocs serve --> serves the site locally. Execute from folder that contains mkdocs.yml mkdocs gh-deploy --> serves the site to github. Execute from folder that contains mkdocs.yml Back To terryinfcco.com For full documentation about the tool used to build this site, visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Grandpa Terry's Personal Knowledge Base"},{"location":"#grandpa-terrys-personal-knowledge-base","text":"(Sounds pompous doesn't it?) Basically a place to grab the stuff I'm trying to learn from books, Udemy, Youtube, and the Web in general.","title":"Grandpa Terry's Personal Knowledge Base"},{"location":"#to-work-with-this-mkdocs-site","text":"add or edit the files inside the docs folder mkdocs serve --> serves the site locally. Execute from folder that contains mkdocs.yml mkdocs gh-deploy --> serves the site to github. Execute from folder that contains mkdocs.yml Back To terryinfcco.com For full documentation about the tool used to build this site, visit mkdocs.org .","title":"To work with this mkdocs site:"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"MkDocs_Notes/","text":"Markdown Code Block - Start with 4 spaces. Headings - # signs - 1 biggest Horizontal Line - 4 dashes Line Break - end line with 2 spaces and a return Lists start with an asterisk","title":"MkDocs Notes"},{"location":"MkDocs_Notes/#markdown","text":"Code Block - Start with 4 spaces. Headings - # signs - 1 biggest Horizontal Line - 4 dashes Line Break - end line with 2 spaces and a return Lists start with an asterisk","title":"Markdown"},{"location":"grandpaterry_website_docs/","text":"Docs For grandpaterry.xyz Setup The Dokuwiki and site folders are Dokuwiki and Mkdocs respectively. I didn't back those up. They're just uploads from Beelink (for Dokuwiki) and the Sync folder (for Mkdocs - after doing an mkdocs build command. The main directory and the images and css directories are backed up to the Syncthing Sync/grandpaterry.xyz folder.","title":"Grandpaterry website docs"},{"location":"grandpaterry_website_docs/#docs-for-grandpaterryxyz-setup","text":"The Dokuwiki and site folders are Dokuwiki and Mkdocs respectively. I didn't back those up. They're just uploads from Beelink (for Dokuwiki) and the Sync folder (for Mkdocs - after doing an mkdocs build command. The main directory and the images and css directories are backed up to the Syncthing Sync/grandpaterry.xyz folder.","title":"Docs For grandpaterry.xyz Setup"},{"location":"markdown-notes/","text":"Sections Headers Quotes Emphasis Horizontal Rule Lists Unordered Lists Ordered Lists Headers H1 uses one # sign H2 uses two # signs H3 uses three # signs H4 uses four # signs Quotes A Quote is preceded by a > (right arrow). It appears with a gray background. It can be combined with other formatting - so you can put a header or bold or italics in a quote. Emphasis Bold text is created by surrounding the text with 2 asterisks Bold text with italics created by surrounding the text with 3 underscores. Italics is done with one asterisk surrounding text Horizontal Rules A horizontal rule is created with 3 dashes on a line by themselves Lists Unordered Lists Can use asterisks or hyphens or plus signs to create a list sub list items are created by indenting with a tab and you can continue to indent. Ordered Lists Just precede the list item with a number and a period. Doesn't matter which number, it will just go in the right order anyway. Again you can use tabs to indent for a sublist. Links Create a link by surrounding it with left and right arrows. https://www.google.com To have a name description show up precede the link by the text you want contained in square brackets. Google Then use parentheses around the url rather than left and right arrows.","title":"Markdown notes"},{"location":"markdown-notes/#sections","text":"Headers Quotes Emphasis Horizontal Rule Lists Unordered Lists Ordered Lists","title":"Sections"},{"location":"markdown-notes/#headers","text":"","title":"Headers"},{"location":"markdown-notes/#h1-uses-one-sign","text":"","title":"H1 uses one # sign"},{"location":"markdown-notes/#h2-uses-two-signs","text":"","title":"H2 uses two # signs"},{"location":"markdown-notes/#h3-uses-three-signs","text":"","title":"H3 uses three # signs"},{"location":"markdown-notes/#h4-uses-four-signs","text":"","title":"H4 uses four # signs"},{"location":"markdown-notes/#quotes","text":"A Quote is preceded by a > (right arrow). It appears with a gray background. It can be combined with other formatting - so you can put a header or bold or italics in a quote.","title":"Quotes"},{"location":"markdown-notes/#emphasis","text":"Bold text is created by surrounding the text with 2 asterisks Bold text with italics created by surrounding the text with 3 underscores. Italics is done with one asterisk surrounding text","title":"Emphasis"},{"location":"markdown-notes/#horizontal-rules","text":"A horizontal rule is created with 3 dashes on a line by themselves","title":"Horizontal Rules"},{"location":"markdown-notes/#lists","text":"","title":"Lists"},{"location":"markdown-notes/#unordered-lists","text":"Can use asterisks or hyphens or plus signs to create a list sub list items are created by indenting with a tab and you can continue to indent.","title":"Unordered Lists"},{"location":"markdown-notes/#ordered-lists","text":"Just precede the list item with a number and a period. Doesn't matter which number, it will just go in the right order anyway. Again you can use tabs to indent for a sublist.","title":"Ordered Lists"},{"location":"markdown-notes/#links","text":"Create a link by surrounding it with left and right arrows. https://www.google.com To have a name description show up precede the link by the text you want contained in square brackets. Google Then use parentheses around the url rather than left and right arrows.","title":"Links"},{"location":"50WebProjects/Environment/","text":"Lesson 2. Environment Uses VSCode Emmet h1.myclass creates h1 with class myclass h1#myid creates h1 with id myid .myclass creates div class = myclass Live Server Extension Auto Rename Tag Bracket Pair Colorizer Prettier Doesn't use semicolons Single quotes Tab Width 2 Format on Save","title":"Environment"},{"location":"50WebProjects/Environment/#lesson-2-environment","text":"Uses VSCode Emmet h1.myclass creates h1 with class myclass h1#myid creates h1 with id myid .myclass creates div class = myclass Live Server Extension Auto Rename Tag Bracket Pair Colorizer Prettier Doesn't use semicolons Single quotes Tab Width 2 Format on Save","title":"Lesson 2. Environment"},{"location":"Blog/January-2021/","text":"MkDocs as a Journal Platform - January 14, 2021 Is there any reason this (MkDocs) can't work as well for a journal as any other platform? I really like the material theme. I don't know if I can do deeper nesting and I'm not sure I want to. Would that have issues around sorting? Also MkDocs is easy to search. I think that's a big plus.","title":"January 2021"},{"location":"Blog/January-2021/#mkdocs-as-a-journal-platform-january-14-2021","text":"Is there any reason this (MkDocs) can't work as well for a journal as any other platform? I really like the material theme. I don't know if I can do deeper nesting and I'm not sure I want to. Would that have issues around sorting? Also MkDocs is easy to search. I think that's a big plus.","title":"MkDocs as a Journal Platform - January 14, 2021"},{"location":"Guizero_Magpi_Book/common_properties/","text":"Common Properties .bg - set background color app.bg = \"yellow\" app.bg = \"#FBFBD0\" app.bg = (251, 251, 208)","title":"Common properties"},{"location":"Guizero_Magpi_Book/common_properties/#common-properties","text":".bg - set background color app.bg = \"yellow\" app.bg = \"#FBFBD0\" app.bg = (251, 251, 208)","title":"Common Properties"},{"location":"Guizero_Magpi_Book/guizero_basic_template/","text":"GUIZero Basic Template # import each widget you're going to use separately from guizero import App # App is how you create the windows / containers app = App(title=\"Hello World\") # window_name.display() is the way you do the event loop app.display()","title":"Guizero basic template"},{"location":"Guizero_Magpi_Book/guizero_basic_template/#guizero-basic-template","text":"# import each widget you're going to use separately from guizero import App # App is how you create the windows / containers app = App(title=\"Hello World\") # window_name.display() is the way you do the event loop app.display()","title":"GUIZero Basic Template"},{"location":"Guizero_Magpi_Book/picture/","text":"Images # Add the picture widget to our app from guizero import App, Text, Picture old_grandpa = Picture(app, image='OldGrandpa.png')","title":"Picture"},{"location":"Guizero_Magpi_Book/picture/#images","text":"# Add the picture widget to our app from guizero import App, Text, Picture old_grandpa = Picture(app, image='OldGrandpa.png')","title":"Images"},{"location":"Guizero_Magpi_Book/push_button/","text":"Push Button from guizero import PushButton # Create a button in container app, # function to run is choose_name # button text is Tell me! button = PushButton(app, choose_name, text=\"Tell me!\") # Change the button background color button.bg = \"red\" # Change the button text size button.text_size = 20 # Change the button font button.font = \"Times New Roman\" # Change the button text_color button.text_color = \"white\" app.display()","title":"Push button"},{"location":"Guizero_Magpi_Book/push_button/#push-button","text":"from guizero import PushButton # Create a button in container app, # function to run is choose_name # button text is Tell me! button = PushButton(app, choose_name, text=\"Tell me!\") # Change the button background color button.bg = \"red\" # Change the button text size button.text_size = 20 # Change the button font button.font = \"Times New Roman\" # Change the button text_color button.text_color = \"white\" app.display()","title":"Push Button"},{"location":"Guizero_Magpi_Book/text_box/","text":"Text Box from guizero import App, Text app = App(title = \"Hello World\") # Now put a line of text in window \"app\" message = Text(app, text = \"Welcome to the app\") app.display() Properties: # Change Text Size: message.text_size = 50 # Change Font message.font = \"Times New Roman\" # Change Text Color message.text_color = \"white\"","title":"Text box"},{"location":"Guizero_Magpi_Book/text_box/#text-box","text":"from guizero import App, Text app = App(title = \"Hello World\") # Now put a line of text in window \"app\" message = Text(app, text = \"Welcome to the app\") app.display() Properties: # Change Text Size: message.text_size = 50 # Change Font message.font = \"Times New Roman\" # Change Text Color message.text_color = \"white\"","title":"Text Box"},{"location":"HTML/ColtWebP1/","text":"UDEMY - COLT STEELE WEB DEVELOPER BOOT CAMP Vid20. Elements <p>paragraph</p> Vid21. Save files with html extension <b>bold element </b> Vid22. MOZILLA DEVELOPER Network (MDN) search by adding man to your search string Vid23. Paragraph related content you want to group. Block element. <p></p> Vid24. Headings H1 TO H6 largest to smallest. Should only have one hl on a page. Use like an outline for the page Sub Headings, sub sub headings, etc. You should never have an h6 unless you also have hl to h5 already You should never have an h4 unless you already have an h1 to h3 etc. Vid25. Right Click on any web page & pick inspector to see the Chrome Inspector,","title":"ColtWebP1"},{"location":"HTML/ColtWebP1/#udemy-colt-steele-web-developer-boot-camp","text":"Vid20. Elements <p>paragraph</p> Vid21. Save files with html extension <b>bold element </b> Vid22. MOZILLA DEVELOPER Network (MDN) search by adding man to your search string Vid23. Paragraph related content you want to group. Block element. <p></p> Vid24. Headings H1 TO H6 largest to smallest. Should only have one hl on a page. Use like an outline for the page Sub Headings, sub sub headings, etc. You should never have an h6 unless you also have hl to h5 already You should never have an h4 unless you already have an h1 to h3 etc. Vid25. Right Click on any web page & pick inspector to see the Chrome Inspector,","title":"UDEMY - COLT STEELE WEB DEVELOPER BOOT CAMP"},{"location":"HTML/HTML_Images/","text":"Image Tag Assuming the image is in a sub folder called images: <img src=\"images/image.jpg\">","title":"HTML Images"},{"location":"HTML/HTML_Images/#image-tag","text":"Assuming the image is in a sub folder called images: <img src=\"images/image.jpg\">","title":"Image Tag"},{"location":"HTML/HTML_Line_Break/","text":"Line Break Tag <br/> Forces line break.","title":"HTML Line Break"},{"location":"HTML/HTML_Line_Break/#line-break-tag","text":"<br/> Forces line break.","title":"Line Break Tag"},{"location":"HTML/HTML_Paragraph/","text":"Paragraph Tag <p></p> paragraph. Forces line break and spacing.","title":"HTML Paragraph"},{"location":"HTML/HTML_Paragraph/#paragraph-tag","text":"<p></p> paragraph. Forces line break and spacing.","title":"Paragraph Tag"},{"location":"HTML/HTML_Template/","text":"HTML Template Create a starter HTML template in VSCode by typing ! and pressing the tab key in a document with an html suffix.","title":"HTML Template"},{"location":"HTML/HTML_Template/#html-template","text":"Create a starter HTML template in VSCode by typing ! and pressing the tab key in a document with an html suffix.","title":"HTML Template"},{"location":"JavaScript/Codemy_Video03/","text":"Video 3 Javascript can go in the head section or body of HTML page in tags. Or can go in another file: <script src = \"myscript.js\"></script> <script src = \"scripts/myscript.js\"></script> Javascript in the head section is usually used for writing functions.","title":"Codemy Video03"},{"location":"JavaScript/Codemy_Video03/#video-3","text":"Javascript can go in the head section or body of HTML page in tags. Or can go in another file: <script src = \"myscript.js\"></script> <script src = \"scripts/myscript.js\"></script> Javascript in the head section is usually used for writing functions.","title":"Video 3"},{"location":"JavaScript/Codemy_Video04/","text":"Video 4 4 Ways to Output to a Web Page innerHTML - replace text in an existing element <h1 id=\"demo\">Hello World!</h1> <script> document.getElementByID(\"demo\").innerHTML = \"I like celery\" </script> Document Write document.write(\"I really like Celery\") Just dumps text to the screen whereever js code is located in the html document. Not usually used. Erases page if used after page is already loaded. Window Alert window.alert(\"I still really like celery\") Creates a popup on the screen Console console.log(\"Just Kidding\") Doesn't go on screen but to developer console.","title":"Codemy Video04"},{"location":"JavaScript/Codemy_Video04/#video-4","text":"","title":"Video 4"},{"location":"JavaScript/Codemy_Video04/#4-ways-to-output-to-a-web-page","text":"innerHTML - replace text in an existing element <h1 id=\"demo\">Hello World!</h1> <script> document.getElementByID(\"demo\").innerHTML = \"I like celery\" </script> Document Write document.write(\"I really like Celery\") Just dumps text to the screen whereever js code is located in the html document. Not usually used. Erases page if used after page is already loaded. Window Alert window.alert(\"I still really like celery\") Creates a popup on the screen Console console.log(\"Just Kidding\") Doesn't go on screen but to developer console.","title":"4 Ways to Output to a Web Page"},{"location":"JavaScript/Codemy_Video05/","text":"John Elder Video 5 Statements end with semicolons ; You can put more than one statement on a line as long as you separate them with semicolons. Multiple statements on a line is usually discouraged. One line comments start with // Javascript ignores white space and blank lines. 2+2 and 2 + 2 are the same. Code blocks are surrounded by curly brackets - more to be explained later.","title":"Codemy Video05"},{"location":"JavaScript/Codemy_Video05/#john-elder-video-5","text":"Statements end with semicolons ; You can put more than one statement on a line as long as you separate them with semicolons. Multiple statements on a line is usually discouraged. One line comments start with // Javascript ignores white space and blank lines. 2+2 and 2 + 2 are the same. Code blocks are surrounded by curly brackets - more to be explained later.","title":"John Elder Video 5"},{"location":"JavaScript/Codemy_Video06/","text":"John Elder Video 6 Variables Use var statement to declare variables. Accepted style is to use camel case for variable names. var firstName; var firstName = \"John\";","title":"Codemy Video06"},{"location":"JavaScript/Codemy_Video06/#john-elder-video-6","text":"","title":"John Elder Video 6"},{"location":"JavaScript/Codemy_Video06/#variables","text":"Use var statement to declare variables. Accepted style is to use camel case for variable names. var firstName; var firstName = \"John\";","title":"Variables"},{"location":"JavaScript/Codemy_Video07/","text":"John Elder Video 7 Math and Numbers No differentiation of integers and floats. In Javascript they're just numbers. add subtract multiply / divide ** exponent % modulus Order of operation is standard, but best just to use parentheses.","title":"Codemy Video07"},{"location":"JavaScript/Codemy_Video07/#john-elder-video-7","text":"","title":"John Elder Video 7"},{"location":"JavaScript/Codemy_Video07/#math-and-numbers","text":"No differentiation of integers and floats. In Javascript they're just numbers. add subtract multiply / divide ** exponent % modulus Order of operation is standard, but best just to use parentheses.","title":"Math and Numbers"},{"location":"JavaScript/Codemy_Video08/","text":"John Elder Video 8 Assignment Operators Besides standard = sign += adds and assigns, -= subtracts and assigns, *= multiply and assign, and /= divide and assign: num1 +=5;","title":"Codemy Video08"},{"location":"JavaScript/Codemy_Video08/#john-elder-video-8","text":"","title":"John Elder Video 8"},{"location":"JavaScript/Codemy_Video08/#assignment-operators","text":"Besides standard = sign += adds and assigns, -= subtracts and assigns, *= multiply and assign, and /= divide and assign: num1 +=5;","title":"Assignment Operators"},{"location":"JavaScript/Codemy_Video09/","text":"John Elder Video 9 Comparison Operators == equal to --> returns true or false === data types must match too != not equal to > greater than < less than >= greater than or equal to <= less than or equal to","title":"Codemy Video09"},{"location":"JavaScript/Codemy_Video09/#john-elder-video-9","text":"","title":"John Elder Video 9"},{"location":"JavaScript/Codemy_Video09/#comparison-operators","text":"== equal to --> returns true or false === data types must match too != not equal to > greater than < less than >= greater than or equal to <= less than or equal to","title":"Comparison Operators"},{"location":"JavaScript/Codemy_Video10/","text":"Codemy Javascript Video 10 Conditional Statements If Statement: if (conditional in parentheses) {Code Block to execute in curly brackets} <script> firstName = \"John\"; if (firstName == \"John){ document.getElementById(\"demo\").innerHTML = firstName; } </script> Else just another code block: <script> firstName = \"John\"; if (firstName == \"John){ document.getElementById(\"demo\").innerHTML = firstName; } else { document.getElementById(\"demo\").innerHTML = \"Name not John\"; } </script> Else if just adds more blocks: <script> firstName = \"John\"; if (firstName == \"John\"){ document.getElementById(\"demo\").innerHTML = firstName; } else if (firstName == \"Tim\"){ document.getElementById(\"demo\").innerHTML = \"Hi Tim\"; } else { document.getElementById(\"demo\").innerHTML = \"Name not John\"; } </script>","title":"Codemy Video10"},{"location":"JavaScript/Codemy_Video10/#codemy-javascript-video-10","text":"Conditional Statements If Statement: if (conditional in parentheses) {Code Block to execute in curly brackets} <script> firstName = \"John\"; if (firstName == \"John){ document.getElementById(\"demo\").innerHTML = firstName; } </script> Else just another code block: <script> firstName = \"John\"; if (firstName == \"John){ document.getElementById(\"demo\").innerHTML = firstName; } else { document.getElementById(\"demo\").innerHTML = \"Name not John\"; } </script> Else if just adds more blocks: <script> firstName = \"John\"; if (firstName == \"John\"){ document.getElementById(\"demo\").innerHTML = firstName; } else if (firstName == \"Tim\"){ document.getElementById(\"demo\").innerHTML = \"Hi Tim\"; } else { document.getElementById(\"demo\").innerHTML = \"Name not John\"; } </script>","title":"Codemy Javascript Video 10"},{"location":"JavaScript/Comments/","text":"Javascript Comments Single line comments begin with double forward slashes // This is a single line comment Multiple line comments are delimited by forward slash asterisk and asterisk forward slash . /* Line 1 of a multiple line comment Line 2 Line 3 */","title":"Comments"},{"location":"JavaScript/Comments/#javascript-comments","text":"Single line comments begin with double forward slashes // This is a single line comment Multiple line comments are delimited by forward slash asterisk and asterisk forward slash . /* Line 1 of a multiple line comment Line 2 Line 3 */","title":"Javascript Comments"},{"location":"JavaScript/DataTypes/","text":"JavaScript Data Types Three basic Data Types: numbers strings Booleans","title":"DataTypes"},{"location":"JavaScript/DataTypes/#javascript-data-types","text":"Three basic Data Types: numbers strings Booleans","title":"JavaScript Data Types"},{"location":"JavaScript/Variables/","text":"JavaScript Variables Define using var keyword var age = 12; JavaScript for Kids book uses camel case. var numberOfSiblings = 1 + 3; var numberOfCandies = 8; numberOfCandies / numberOfSiblings; Create variable using math. var secondsInAMinute = 60; var minutesInAnHour = 60; var secondsInAnHour = secondsInAMinute * minutesInAnHour; var hoursInADay = 24; var secondsInADay = secondsInAnHour * hoursInADay;","title":"Variables"},{"location":"JavaScript/Variables/#javascript-variables","text":"Define using var keyword var age = 12; JavaScript for Kids book uses camel case. var numberOfSiblings = 1 + 3; var numberOfCandies = 8; numberOfCandies / numberOfSiblings; Create variable using math. var secondsInAMinute = 60; var minutesInAnHour = 60; var secondsInAnHour = secondsInAMinute * minutesInAnHour; var hoursInADay = 24; var secondsInADay = secondsInAnHour * hoursInADay;","title":"JavaScript Variables"},{"location":"JavaScript/numbers/","text":"Numbers Pretty Standard +, -, *, / Modulo is remainder after division. i.e. 8 % 2 is zero and 8 % 3 is 2","title":"Numbers"},{"location":"JavaScript/numbers/#numbers","text":"Pretty Standard +, -, *, / Modulo is remainder after division. i.e. 8 % 2 is zero and 8 % 3 is 2","title":"Numbers"},{"location":"Misc/WDBCAngela69/","text":"69. BOOTSTRAP NAVIGATION BAR. codeply - like code pen but allows bootstrap. <nav class=\"navbar\" <ul class = \"navbar-nav\"> <li> Contacts </li> <li> nav-item </li> </ul> </nav> She got this from Bootstrap Documentation","title":"WDBCAngela69"},{"location":"Misc/WDBCAngela69/#69-bootstrap-navigation-bar","text":"codeply - like code pen but allows bootstrap. <nav class=\"navbar\" <ul class = \"navbar-nav\"> <li> Contacts </li> <li> nav-item </li> </ul> </nav> She got this from Bootstrap Documentation","title":"69. BOOTSTRAP NAVIGATION BAR."},{"location":"Misc/emmet/","text":"Emmet Shortcuts html - create html boilerplate h1..h6 - heading h1 is the largest p - paragraph hr - horizontal rule ol - ordered list ul - unordered list li - list item img - image tag a - anchor tag table - tables tr - table row thead - table header tf - table footer form - form","title":"Emmet"},{"location":"Misc/emmet/#emmet-shortcuts","text":"html - create html boilerplate h1..h6 - heading h1 is the largest p - paragraph hr - horizontal rule ol - ordered list ul - unordered list li - list item img - image tag a - anchor tag table - tables tr - table row thead - table header tf - table footer form - form","title":"Emmet Shortcuts"},{"location":"Misc/fun-ideas/","text":"Fun Ideas Just start Kids Can Code Videos and go through all. python program to read an i3 or openbox config & produce a cheatsheet make the rough blog look better really make progress with tiddly wiki - make progress with Jekyll can I just upload site to hostinger? make whole site with Jekyll? wiki? i3- i3-msg, scratch pad, restore windows Jekyll everything posts except maybe about & external links page GIANT VIM NOTES FILE H2 FOR EACH SECTION","title":"Fun ideas"},{"location":"Misc/fun-ideas/#fun-ideas","text":"Just start Kids Can Code Videos and go through all. python program to read an i3 or openbox config & produce a cheatsheet make the rough blog look better really make progress with tiddly wiki - make progress with Jekyll can I just upload site to hostinger? make whole site with Jekyll? wiki? i3- i3-msg, scratch pad, restore windows Jekyll everything posts except maybe about & external links page GIANT VIM NOTES FILE H2 FOR EACH SECTION","title":"Fun Ideas"},{"location":"Misc/github/","text":"Basic Github usage Configure Git git config \u2013global user.name \u201cTerry E. Dutcher\u201d git config \u2013global user.email \u201cterryinclmich@hotmail.com\u201d This is only used to track who made what changes. It doesn\u2019t log you in anywhere. Repositories To create a local repository run git init At any time you can use git status to see the current condition of the repository. To add files to staging area use git add filename(s) To add all new and changed files to the staging area use git add . Then commit the changes git commit -m \u201cCommit Message\u201d . Commit messages are important in case you need to revert to a previous version of your project. Clone a repository: git clone https://github.com/terryinfcco/terryinfcco.github.io Get updates to an existing repository. You'll get messages of what (if anything) has changed. git pull origin main (or current branch) To see a history of commits use git log . This will give you author, date and a commit hash for each commit. To go back to a previous revision do git checkout hash . That will create a branch called (HEAD detached at hash). To go back to the master branch do git checkout master To start a new branch do git branch newbranchname . At this point both branches match. After you\u2019ve made changes to the new branch, if you like the new stuff from the new branch switch back to the master branch git checkout master , then do git merge newbranchname . After Making Changes: git add . git commit -m \"Commit message\" git push origin main (main might be master in older repos) To get credentials saved on a computer run: git config credential.helper store Then next time you enter your credentials it will store them on your hard disk.","title":"Github"},{"location":"Misc/github/#basic-github-usage","text":"Configure Git git config \u2013global user.name \u201cTerry E. Dutcher\u201d git config \u2013global user.email \u201cterryinclmich@hotmail.com\u201d This is only used to track who made what changes. It doesn\u2019t log you in anywhere. Repositories To create a local repository run git init At any time you can use git status to see the current condition of the repository. To add files to staging area use git add filename(s) To add all new and changed files to the staging area use git add . Then commit the changes git commit -m \u201cCommit Message\u201d . Commit messages are important in case you need to revert to a previous version of your project. Clone a repository: git clone https://github.com/terryinfcco/terryinfcco.github.io Get updates to an existing repository. You'll get messages of what (if anything) has changed. git pull origin main (or current branch) To see a history of commits use git log . This will give you author, date and a commit hash for each commit. To go back to a previous revision do git checkout hash . That will create a branch called (HEAD detached at hash). To go back to the master branch do git checkout master To start a new branch do git branch newbranchname . At this point both branches match. After you\u2019ve made changes to the new branch, if you like the new stuff from the new branch switch back to the master branch git checkout master , then do git merge newbranchname . After Making Changes: git add . git commit -m \"Commit message\" git push origin main (main might be master in older repos) To get credentials saved on a computer run: git config credential.helper store Then next time you enter your credentials it will store them on your hard disk.","title":"Basic Github usage"},{"location":"Misc/vscode/","text":"VSCode Notes In VSCODE CTRL + arrows moves to end of Line, beginning of line, end of doc, beginning of doc. in vscode element then tab does the arrow brackets. so p tab becomes <p></p> in vscode lorem tab becomes lorem ipsum text lorem*st tab = 5 copies","title":"Vscode"},{"location":"Misc/vscode/#vscode-notes","text":"In VSCODE CTRL + arrows moves to end of Line, beginning of line, end of doc, beginning of doc. in vscode element then tab does the arrow brackets. so p tab becomes <p></p> in vscode lorem tab becomes lorem ipsum text lorem*st tab = 5 copies","title":"VSCode Notes"},{"location":"Python/Assignment_Operators/","text":"Python Assignment Operators = assign something to a variable += add then assign to variable num +=2 -= subtract then assign to variable num -=2 *= multiply /= divide **= exponent %= modulus","title":"Assignment Operators"},{"location":"Python/Assignment_Operators/#python-assignment-operators","text":"= assign something to a variable += add then assign to variable num +=2 -= subtract then assign to variable num -=2 *= multiply /= divide **= exponent %= modulus","title":"Python Assignment Operators"},{"location":"Python/Classes/","text":"Python Classes Fundamental to Object Oriented. A Class is the \"blueprint\" for an object. Python has lots of built in classes - like the methods .upper() or .lower() for a string. Functions inside a class are referred to as methods. The first method in any class is the init method. Convention is that class names are capitalized. class Square: def __init__(self, side_length): self.side_length = side_length def area(self): return self.side_length * self.side_length def perimeter(self): return self.side_length * 4 def report(self): print (\"Side Length: %s\" % self.side_length ) print (\"Area: %s\" % self.area()) print (\"Perimeter: %s\" % self.perimeter()) my_square = Square(5) my_square.report()","title":"Classes"},{"location":"Python/Classes/#python-classes","text":"Fundamental to Object Oriented. A Class is the \"blueprint\" for an object. Python has lots of built in classes - like the methods .upper() or .lower() for a string. Functions inside a class are referred to as methods. The first method in any class is the init method. Convention is that class names are capitalized. class Square: def __init__(self, side_length): self.side_length = side_length def area(self): return self.side_length * self.side_length def perimeter(self): return self.side_length * 4 def report(self): print (\"Side Length: %s\" % self.side_length ) print (\"Area: %s\" % self.area()) print (\"Perimeter: %s\" % self.perimeter()) my_square = Square(5) my_square.report()","title":"Python Classes"},{"location":"Python/Comments/","text":"Python Comments The # hash symbol means 'comment' Python will ignore anything that is written after the hash - it is a way to add your own headings, notes or reminders to the program. It can be on a line by itself or at the end of a line of code. # Print Hello World To the screen print(\"Hello World\") # This line prints Hello World to the screen Can comment out multiple lines of code using 3 single quotation marks on line before and line after the the block you want to comment ''' Multiline comment Line 2 '''","title":"Comments"},{"location":"Python/Comments/#python-comments","text":"The # hash symbol means 'comment' Python will ignore anything that is written after the hash - it is a way to add your own headings, notes or reminders to the program. It can be on a line by itself or at the end of a line of code. # Print Hello World To the screen print(\"Hello World\") # This line prints Hello World to the screen Can comment out multiple lines of code using 3 single quotation marks on line before and line after the the block you want to comment ''' Multiline comment Line 2 '''","title":"Python Comments"},{"location":"Python/Comparison_Operators/","text":"Python Assignment Operators == equal to != not equal to > greater than < less than >= greater than or equal to <= less than or equal to","title":"Comparison Operators"},{"location":"Python/Comparison_Operators/#python-assignment-operators","text":"== equal to != not equal to > greater than < less than >= greater than or equal to <= less than or equal to","title":"Python Assignment Operators"},{"location":"Python/Conditional_Statements/","text":"Python Conditional Statements Use if else and elif to make decisions. The statements end with a colon and indentation of sub blocks is required. num = 10 if (num > 10): print(\"The number is greater than 10\") elif (num == 10): print(\"The number is equal to 10\") else: print(\"The number is less than 10\") Can also put multiple condition in an if statement: if (num > 10) and (num < 50): print(\"Number greater than 10 and less than 50\")","title":"Conditional Statements"},{"location":"Python/Conditional_Statements/#python-conditional-statements","text":"Use if else and elif to make decisions. The statements end with a colon and indentation of sub blocks is required. num = 10 if (num > 10): print(\"The number is greater than 10\") elif (num == 10): print(\"The number is equal to 10\") else: print(\"The number is less than 10\") Can also put multiple condition in an if statement: if (num > 10) and (num < 50): print(\"Number greater than 10 and less than 50\")","title":"Python Conditional Statements"},{"location":"Python/Convert_Data_Types/","text":"Python Data Conversion int() - convert to integer. Truncates - doesn't round. str() - convert to string. float() - convert to floating point. round(num, decimals) - rounds a num to # decimal points.","title":"Convert Data Types"},{"location":"Python/Convert_Data_Types/#python-data-conversion","text":"int() - convert to integer. Truncates - doesn't round. str() - convert to string. float() - convert to floating point. round(num, decimals) - rounds a num to # decimal points.","title":"Python Data Conversion"},{"location":"Python/Data_types/","text":"Python Data Types Boolean - True or False - case sensitive Numbers Integers Floating Point Numbers Strings Lists Dictionaries Tuples","title":"Data types"},{"location":"Python/Data_types/#python-data-types","text":"Boolean - True or False - case sensitive Numbers Integers Floating Point Numbers Strings Lists Dictionaries Tuples","title":"Python Data Types"},{"location":"Python/Dictionaries/","text":"Python Dictionaries Made up of key / value pairs. Created using curly braces. Values could be a list. And the key can be a number rather than a string. fav_pizza = { \"John\": \"Pepperoni\", \"Bob\": \"Mushroom\", \"Mary\": \"Cheese\" } print (fav_pizza[\"John\"]) # will print Pepperoni print (fav_pizza[\"Mary\"]) # will print Cheese del fav_pizza[\"John\"] # John will be deleted from the dictionary fav_pizza.update({\"Tina\": \"Green Peppers\"}) # Tina is added to dictionary fav_pizza[\"John\"] = \"Green Peppers\" # John changed to Green Peppers","title":"Dictionaries"},{"location":"Python/Dictionaries/#python-dictionaries","text":"Made up of key / value pairs. Created using curly braces. Values could be a list. And the key can be a number rather than a string. fav_pizza = { \"John\": \"Pepperoni\", \"Bob\": \"Mushroom\", \"Mary\": \"Cheese\" } print (fav_pizza[\"John\"]) # will print Pepperoni print (fav_pizza[\"Mary\"]) # will print Cheese del fav_pizza[\"John\"] # John will be deleted from the dictionary fav_pizza.update({\"Tina\": \"Green Peppers\"}) # Tina is added to dictionary fav_pizza[\"John\"] = \"Green Peppers\" # John changed to Green Peppers","title":"Python Dictionaries"},{"location":"Python/Dynamic_Typing/","text":"Python Dynamic Typing Variables can change not only values, but types. The following is perfectly acceptable. var1 = True var1 = \"a dog\" var1 = 22/7","title":"Dynamic Typing"},{"location":"Python/Dynamic_Typing/#python-dynamic-typing","text":"Variables can change not only values, but types. The following is perfectly acceptable. var1 = True var1 = \"a dog\" var1 = 22/7","title":"Python Dynamic Typing"},{"location":"Python/Functions/","text":"Python Functions Define your own functions. def func_name(arg1, arg2): then indent the body of the function. Functions can return values. def combine_name(first_name, last_name): full_name = first_name + \" \" + last_name print(full_name) combine_name(\"Terry\", \"Dutcher\") Can return values from a function. def combine_name(first_name, last_name): full_name = first_name + \" \" + last_name return full_name fname = combine_name(first_name, last_name) print (fname)","title":"Functions"},{"location":"Python/Functions/#python-functions","text":"Define your own functions. def func_name(arg1, arg2): then indent the body of the function. Functions can return values. def combine_name(first_name, last_name): full_name = first_name + \" \" + last_name print(full_name) combine_name(\"Terry\", \"Dutcher\") Can return values from a function. def combine_name(first_name, last_name): full_name = first_name + \" \" + last_name return full_name fname = combine_name(first_name, last_name) print (fname)","title":"Python Functions"},{"location":"Python/Input_Function/","text":"Python Input Function The input function waits for the user to type some text on the keyboard. Prompt is optional. Colt prefers to use a print statement as the prompt and then get the input on a separate line. my_name = input(\"Enter your name: \") All values from the input function come in as strings. If you enter 29 and want to use it in a math function you need to convert it with either the int or float function","title":"Input Function"},{"location":"Python/Input_Function/#python-input-function","text":"The input function waits for the user to type some text on the keyboard. Prompt is optional. Colt prefers to use a print statement as the prompt and then get the input on a separate line. my_name = input(\"Enter your name: \") All values from the input function come in as strings. If you enter 29 and want to use it in a math function you need to convert it with either the int or float function","title":"Python Input Function"},{"location":"Python/Len_Function/","text":"Python Len Function Can be used on strings or lists. len('hello') ==> 5 len(List_of_Names) ==> Num items in lists","title":"Len Function"},{"location":"Python/Len_Function/#python-len-function","text":"Can be used on strings or lists. len('hello') ==> 5 len(List_of_Names) ==> Num items in lists","title":"Python Len Function"},{"location":"Python/Lists/","text":"Python Lists List items are always created using square brackets: names = [\"John\", \"Bob\", \"Mary\"] List items are indexed and always start with zero. So: print(names[0]) # prints John print(names) # prints all items in list. Lists can contain more that one datatype. Change one item in a list by addressing it directly: names[0] = \"Wes\" Append an item to a list: names.append(\"Wes\") # Wes becomes 4th item in list. Lists can contain other lists: nums = [1,2,3,4,5] names = [\"John\", \"Bob\", \"Tina\", nums] print(names[3,2]) prints 3 print(names[3,2] + 10) prints 13 len(names) # returns number of items in the list.","title":"Lists"},{"location":"Python/Lists/#python-lists","text":"List items are always created using square brackets: names = [\"John\", \"Bob\", \"Mary\"] List items are indexed and always start with zero. So: print(names[0]) # prints John print(names) # prints all items in list. Lists can contain more that one datatype. Change one item in a list by addressing it directly: names[0] = \"Wes\" Append an item to a list: names.append(\"Wes\") # Wes becomes 4th item in list. Lists can contain other lists: nums = [1,2,3,4,5] names = [\"John\", \"Bob\", \"Tina\", nums] print(names[3,2]) prints 3 print(names[3,2] + 10) prints 13 len(names) # returns number of items in the list.","title":"Python Lists"},{"location":"Python/Loops/","text":"Python Loops While loops are like if statements, you do something while a condition is true counter = 0 while (counter < 10): print (\"The count is: %s\" % counter) counter +=1 For Loops loop through something like a string, a list, or a dictionary. name = \"John\" for x in name: print (x) # prints J then o then h then n fav_pizza = { \"John\": \"Pepperoni\", \"Bob\": \"Cheese\", \"Tina\": \"Supreme\" } for key, value in fav_pizza.items(): print(key, value) # will go through the dictionary using the items function. Variables could be anything like name, style.","title":"Loops"},{"location":"Python/Loops/#python-loops","text":"While loops are like if statements, you do something while a condition is true counter = 0 while (counter < 10): print (\"The count is: %s\" % counter) counter +=1 For Loops loop through something like a string, a list, or a dictionary. name = \"John\" for x in name: print (x) # prints J then o then h then n fav_pizza = { \"John\": \"Pepperoni\", \"Bob\": \"Cheese\", \"Tina\": \"Supreme\" } for key, value in fav_pizza.items(): print(key, value) # will go through the dictionary using the items function. Variables could be anything like name, style.","title":"Python Loops"},{"location":"Python/Math_Operators/","text":"Python Math Operators Table 1-1: Math Operators from Highest to Lowest Precedence Operator Operation Example Evaluates to ** Exponent 2 ** 3 8 % Modulus/remainder 22 % 8 6 // Integer division/floored quotient 22 // 8 2 / Division 22 / 8 2.75 * Multiplication 3 * 5 15 - Subtraction 5 - 2 3 + Addition 2 + 2 4","title":"Math Operators"},{"location":"Python/Math_Operators/#python-math-operators","text":"Table 1-1: Math Operators from Highest to Lowest Precedence Operator Operation Example Evaluates to ** Exponent 2 ** 3 8 % Modulus/remainder 22 % 8 6 // Integer division/floored quotient 22 // 8 2 / Division 22 / 8 2.75 * Multiplication 3 * 5 15 - Subtraction 5 - 2 3 + Addition 2 + 2 4","title":"Python Math Operators"},{"location":"Python/Modules/","text":"Python Modules Modules are basically a collection of functions that you can import and use in your own program. Pretty simple - create a python file with one or more functions in it. Then import the module and use the functions by referring to them as module_name.function_name().","title":"Modules"},{"location":"Python/Modules/#python-modules","text":"Modules are basically a collection of functions that you can import and use in your own program. Pretty simple - create a python file with one or more functions in it. Then import the module and use the functions by referring to them as module_name.function_name().","title":"Python Modules"},{"location":"Python/None/","text":"Python None None is a special case - represents the idea of nothing, some other languages use Null. Has a type of 'NoneType'. Way to define a variable that doesn't have a value.","title":"None"},{"location":"Python/None/#python-none","text":"None is a special case - represents the idea of nothing, some other languages use Null. Has a type of 'NoneType'. Way to define a variable that doesn't have a value.","title":"Python None"},{"location":"Python/Numeric-Functions/","text":"Python Numeric Functions float(int) Converts an integer to a float 10 --> 10.0 float(str) Converts a string to a float float(\"10.3\") --> 10.3 int(float) Converts and truncates float to integer int(str) Converts string to integer","title":"Numeric Functions"},{"location":"Python/Numeric-Functions/#python-numeric-functions","text":"float(int) Converts an integer to a float 10 --> 10.0 float(str) Converts a string to a float float(\"10.3\") --> 10.3 int(float) Converts and truncates float to integer int(str) Converts string to integer","title":"Python Numeric Functions"},{"location":"Python/OS_Module/","text":"Python OS Module import os os.system('clear')","title":"OS Module"},{"location":"Python/OS_Module/#python-os-module","text":"import os os.system('clear')","title":"Python OS Module"},{"location":"Python/Objects/","text":"Python Object Oriented Programming Tech With Tim Pretty much everything in Python is an object If you create a string, it's an instance of the class string Methods are dot operators appended to an object string = \"hello\" print (string.upper()) Create an object: class Dog: def bark(self) print(\"Bark\")","title":"Objects"},{"location":"Python/Objects/#python-object-oriented-programming","text":"","title":"Python Object Oriented Programming"},{"location":"Python/Objects/#tech-with-tim","text":"Pretty much everything in Python is an object If you create a string, it's an instance of the class string Methods are dot operators appended to an object string = \"hello\" print (string.upper()) Create an object: class Dog: def bark(self) print(\"Bark\")","title":"Tech With Tim"},{"location":"Python/Print/","text":"Python Print The python print statement wiki page. Basic Print Statement - print() prints a blank line. print(\"Two plus two equals \",2+2); print()","title":"Print"},{"location":"Python/Print/#python-print","text":"The python print statement wiki page. Basic Print Statement - print() prints a blank line. print(\"Two plus two equals \",2+2); print()","title":"Python Print"},{"location":"Python/String_Concatenation/","text":"Python String Concatenation Doesn't do implicit typing. All operands have to be strings. 'Alice'+'Bob' ==> 'AliceBob' 'Alice' * 5 ==> 'AliceAliceAliceAliceAlice' str_one = \"ice\" str_one += \" cream\" str_one ==> \"ice cream\"","title":"String Concatenation"},{"location":"Python/String_Concatenation/#python-string-concatenation","text":"Doesn't do implicit typing. All operands have to be strings. 'Alice'+'Bob' ==> 'AliceBob' 'Alice' * 5 ==> 'AliceAliceAliceAliceAlice' str_one = \"ice\" str_one += \" cream\" str_one ==> \"ice cream\"","title":"Python String Concatenation"},{"location":"Python/String_Formatting/","text":"Python String Formatting F-Strings (python 3.6+) used by python to interpolate values. guess = 8 print (f\"your guess of {guess} was incorrect!\") name = \"bluethecat\" print(f\"Nice try, {name} but your guess of {guess} is wrong!\") Old ways: x = 10 formatted = \"I've told you {} times already!\".format(x) x = 10 formatted = \"I've told you %d times already!\" % (x)","title":"String Formatting"},{"location":"Python/String_Formatting/#python-string-formatting","text":"F-Strings (python 3.6+) used by python to interpolate values. guess = 8 print (f\"your guess of {guess} was incorrect!\") name = \"bluethecat\" print(f\"Nice try, {name} but your guess of {guess} is wrong!\") Old ways: x = 10 formatted = \"I've told you {} times already!\".format(x) x = 10 formatted = \"I've told you %d times already!\" % (x)","title":"Python String Formatting"},{"location":"Python/String_Functions/","text":"Python String Functions string.upper() Converts string to uppercase string.lower() Converts string to lowercase string.capitalize() - Capitalize first character in string string.title() - Capitalize every word in the string string.swapcase() - change capitilization of every character in the string len(string) - returns length of string string[13] - returns 14th character in the string string[18:22] - returns 4 characters starting at the 19th character string.split(\" \") returns a list of the string split everywhere there is a space. You can use any character in place of the space.","title":"String Functions"},{"location":"Python/String_Functions/#python-string-functions","text":"string.upper() Converts string to uppercase string.lower() Converts string to lowercase string.capitalize() - Capitalize first character in string string.title() - Capitalize every word in the string string.swapcase() - change capitilization of every character in the string len(string) - returns length of string string[13] - returns 14th character in the string string[18:22] - returns 4 characters starting at the 19th character string.split(\" \") returns a list of the string split everywhere there is a space. You can use any character in place of the space.","title":"Python String Functions"},{"location":"Python/Strings/","text":"Python Strings Single and Double Quotes Can use either single or double quotes, but you need to be consistent within the same line. Good style says you should be consistent within your program. if you want to use one or the other in the string you have to use the opposite one to delineate the string: print (\"I can't do this with all single quotes\") Escape Sequences All start with backslashes. e.g. \\n - newline, \\ - backslash, \\' - single quote, \\\" - double quote. Strings are indexed. a = \"hello\" a[0] ==> h a[4] ==> o reverse indexing: a[-1] ==> o a[-4] ==> e slices: a[0:2] ==> he --note that the result goes up to but doesn't include the final index alpha = 'abcdef' a[2:4] ==> cd a[2:] ==> cdef methods: change the variable itself. Some change the variable, others have to be assigned to a variable basic = \"Hello World\" upper_basic = basic.upper() ==> HELLO WORLD basic.split() ==> returns list of all words separated by spaces basic.split('a') ==> splits on a's not on spaces. formatted printing: user_name = 'Recruit' action = 'run' print('The {} needs to {}'.format(user_name,action)) ==> The Recruit needs to run","title":"Strings"},{"location":"Python/Strings/#python-strings","text":"Single and Double Quotes Can use either single or double quotes, but you need to be consistent within the same line. Good style says you should be consistent within your program. if you want to use one or the other in the string you have to use the opposite one to delineate the string: print (\"I can't do this with all single quotes\") Escape Sequences All start with backslashes. e.g. \\n - newline, \\ - backslash, \\' - single quote, \\\" - double quote. Strings are indexed. a = \"hello\" a[0] ==> h a[4] ==> o reverse indexing: a[-1] ==> o a[-4] ==> e slices: a[0:2] ==> he --note that the result goes up to but doesn't include the final index alpha = 'abcdef' a[2:4] ==> cd a[2:] ==> cdef methods: change the variable itself. Some change the variable, others have to be assigned to a variable basic = \"Hello World\" upper_basic = basic.upper() ==> HELLO WORLD basic.split() ==> returns list of all words separated by spaces basic.split('a') ==> splits on a's not on spaces. formatted printing: user_name = 'Recruit' action = 'run' print('The {} needs to {}'.format(user_name,action)) ==> The Recruit needs to run","title":"Python Strings"},{"location":"Python/Tuples/","text":"Python Tuples Tuples are like lists but can't be changed. Tuples are faster than lists, so if you're doing something on a large scale it might be worth using a tuple. Tuples are created using parentheses. Also might use if you create that you don't want the user to change. names = (\"John\", \"Bob\", \"Mary\") print (names[0]) # prints John","title":"Tuples"},{"location":"Python/Tuples/#python-tuples","text":"Tuples are like lists but can't be changed. Tuples are faster than lists, so if you're doing something on a large scale it might be worth using a tuple. Tuples are created using parentheses. Also might use if you create that you don't want the user to change. names = (\"John\", \"Bob\", \"Mary\") print (names[0]) # prints John","title":"Python Tuples"},{"location":"Python/Type_Function/","text":"Python Type Function The type function tells you the type of a constant or a variable. Examples: type(100) ==> int type(100.5) ==> float","title":"Type Function"},{"location":"Python/Type_Function/#python-type-function","text":"The type function tells you the type of a constant or a variable. Examples: type(100) ==> int type(100.5) ==> float","title":"Python Type Function"},{"location":"Python/Variables/","text":"Python Variables It can only be one word It can only use letters, numbers, and the underscore character It cannot begin with a number Python convention is to use underscores to separate words that are part of the variable name. Camel Case works but is not conventional. Upper case letters also work but are not conventional. first_name = \"John\" # this is the python convention. First_Name = \"John\" # not the python convention firstName = \"John\" # not the python convention","title":"Variables"},{"location":"Python/Variables/#python-variables","text":"It can only be one word It can only use letters, numbers, and the underscore character It cannot begin with a number Python convention is to use underscores to separate words that are part of the variable name. Camel Case works but is not conventional. Upper case letters also work but are not conventional. first_name = \"John\" # this is the python convention. First_Name = \"John\" # not the python convention firstName = \"John\" # not the python convention","title":"Python Variables"},{"location":"Python/idle_ide/","text":"Python IDLE3 IDE Tab Completion - start typing command and then press tab Recall Code - Alt-p (previous) Alt-n (next -- if there is one)","title":"Idle ide"},{"location":"Python/idle_ide/#python-idle3-ide","text":"Tab Completion - start typing command and then press tab Recall Code - Alt-p (previous) Alt-n (next -- if there is one)","title":"Python IDLE3 IDE"},{"location":"Python_100_Days/Intro/","text":"100 Days of Python One Hour a Day Pledge repl.it Place to play with python code. Left pane has file manager Left pane has settings - she picks dark mode and font size large Turn on code intelligence Click on settings button again to collapse the pane Stack Overflow often used for programmer questions and answers. Indentation is critical in Python","title":"Intro"},{"location":"Python_100_Days/Intro/#replit","text":"Place to play with python code. Left pane has file manager Left pane has settings - she picks dark mode and font size large Turn on code intelligence Click on settings button again to collapse the pane Stack Overflow often used for programmer questions and answers. Indentation is critical in Python","title":"repl.it"},{"location":"Python_100_Days/comments/","text":"Comments # in front of text means a comment Can be at the beginning of a line or in the middle of a line.","title":"Comments"},{"location":"Python_100_Days/comments/#comments","text":"# in front of text means a comment Can be at the beginning of a line or in the middle of a line.","title":"Comments"},{"location":"Python_100_Days/data_type_conversion/","text":"Python Data Conversion str() - convert to string float() - convert to float","title":"Data type conversion"},{"location":"Python_100_Days/data_type_conversion/#python-data-conversion","text":"str() - convert to string float() - convert to float","title":"Python Data Conversion"},{"location":"Python_100_Days/data_types/","text":"Python Data Types Strings Integers Floats Boolean - True, False type(something) will tell you the data type of something","title":"Data types"},{"location":"Python_100_Days/data_types/#python-data-types","text":"Strings Integers Floats Boolean - True, False type(something) will tell you the data type of something","title":"Python Data Types"},{"location":"Python_100_Days/input/","text":"Input Function variable = input(prompt) input(\"What is your Name\")","title":"Input"},{"location":"Python_100_Days/input/#input-function","text":"variable = input(prompt) input(\"What is your Name\")","title":"Input Function"},{"location":"Python_100_Days/math_operators/","text":"Math Operators * Add: + * Subtract: - * Multiply: * * Divide: / # Always creates a floating point answer * Exponent: ** # example 2**3 gives 8 Order of operation - PEMDAS Parentheses Exponent Multiplication Division Addition Subtraction Multiplication and Division are actually the same, as are addition and subtraction, so that whichever is leftmost of multiplication and division will be executed first. Same for addition and subtraction.","title":"Math operators"},{"location":"Python_100_Days/math_operators/#math-operators","text":"* Add: + * Subtract: - * Multiply: * * Divide: / # Always creates a floating point answer * Exponent: ** # example 2**3 gives 8 Order of operation - PEMDAS Parentheses Exponent Multiplication Division Addition Subtraction Multiplication and Division are actually the same, as are addition and subtraction, so that whichever is leftmost of multiplication and division will be executed first. Same for addition and subtraction.","title":"Math Operators"},{"location":"Python_100_Days/print/","text":"Python Print Statement print(\"Hello World!\") print(\"Day 1 - Python Print Function\") print(\"The function is declared like this\") print(\"print('What to print')\")","title":"Print"},{"location":"Python_100_Days/print/#python-print-statement","text":"print(\"Hello World!\") print(\"Day 1 - Python Print Function\") print(\"The function is declared like this\") print(\"print('What to print')\")","title":"Python Print Statement"},{"location":"Python_100_Days/strings/","text":"Python Strings Strings are enclosed in either single or double quotes. \"String in Double Quotes\" 'String in Single Quotes' \\n creates a new line in a python string Concatenate strings with + sign \"Hello \" + \"Angela\"","title":"Strings"},{"location":"Python_100_Days/strings/#python-strings","text":"Strings are enclosed in either single or double quotes. \"String in Double Quotes\" 'String in Single Quotes' \\n creates a new line in a python string Concatenate strings with + sign \"Hello \" + \"Angela\"","title":"Python Strings"},{"location":"Python_100_Days/variables/","text":"Python Variables Naming Variables Make code readable - name is better than n and length is better than l Can use multiple words - separate them with an underscore Can include numbers, but variables can't start with a number Can't use \"reserved\" words - like print, input, len","title":"Variables"},{"location":"Python_100_Days/variables/#python-variables","text":"Naming Variables Make code readable - name is better than n and length is better than l Can use multiple words - separate them with an underscore Can include numbers, but variables can't start with a number Can't use \"reserved\" words - like print, input, len","title":"Python Variables"},{"location":"RexQualisRPi4Kit/lesson1/","text":"Lesson 1 Blinking LED Circuit is 3.3v to 220 ohm resistor to long leg (anode) of LED. Then GPIO 17 to short leg (cathode) of LED. Important Python import RPi.GPIO as GPIO import time GPIO.setmode(GPIO.BCM) GPIO.setup(17, GPIO.OUT, initial=GPIO.HIGH) GPIO.output(17, GPIO.LOW) GPIO.output(17, GPIO.HIGH)","title":"Lesson1"},{"location":"RexQualisRPi4Kit/lesson1/#lesson-1-blinking-led","text":"Circuit is 3.3v to 220 ohm resistor to long leg (anode) of LED. Then GPIO 17 to short leg (cathode) of LED.","title":"Lesson 1 Blinking LED"},{"location":"RexQualisRPi4Kit/lesson1/#important-python","text":"import RPi.GPIO as GPIO import time GPIO.setmode(GPIO.BCM) GPIO.setup(17, GPIO.OUT, initial=GPIO.HIGH) GPIO.output(17, GPIO.LOW) GPIO.output(17, GPIO.HIGH)","title":"Important Python"},{"location":"TKinter/basic_template/","text":"Tkinter Basic Template # import tkinter module import tkinter as tk # Create a tkinter instance root is customary but can name it anything. root = tk.Tk() # Put a caption or title on our window root.title(\"Hello World!\") # Set the size of the window root.geometry(\"400x400\") # And the main event loop root.mainloop()","title":"Basic template"},{"location":"TKinter/basic_template/#tkinter-basic-template","text":"# import tkinter module import tkinter as tk # Create a tkinter instance root is customary but can name it anything. root = tk.Tk() # Put a caption or title on our window root.title(\"Hello World!\") # Set the size of the window root.geometry(\"400x400\") # And the main event loop root.mainloop()","title":"Tkinter Basic Template"},{"location":"TKinter/button/","text":"Buttons in Tkinter Normal format root is the container where you want the button, text is what is displayed on the button, command points to the function that needs to be executed when the button is clicked. myButton = tk.Button(root, text=\"Click Me!\", command = myClick) Note that you don't include parentheses on the function call.","title":"Button"},{"location":"TKinter/button/#buttons-in-tkinter","text":"Normal format root is the container where you want the button, text is what is displayed on the button, command points to the function that needs to be executed when the button is clicked. myButton = tk.Button(root, text=\"Click Me!\", command = myClick) Note that you don't include parentheses on the function call.","title":"Buttons in Tkinter"},{"location":"TKinter/calc_pseudo_code/","text":"Tkinter Calculator Pseudo Code Variables I think I need: Current_value - what's currently in the entry box Current-sub-total - result of whatever I've done up to now. Current Operation - adding, subtract, multiply, divide Initialize: Put a zero in the entry box and current sub total and current value Set current operation to Addition Event Loop: If a number is clicked: Becomes the right most digit of entry_box and current_value If + is clicked add current-value to current-sub-total clear entry box and set current-value to 0 set current-operation to addition If = is clicked if current-operation is addition add current-value to current-sub-total display current-sub-total","title":"Calc pseudo code"},{"location":"TKinter/calc_pseudo_code/#tkinter-calculator-pseudo-code","text":"Variables I think I need: Current_value - what's currently in the entry box Current-sub-total - result of whatever I've done up to now. Current Operation - adding, subtract, multiply, divide Initialize: Put a zero in the entry box and current sub total and current value Set current operation to Addition Event Loop: If a number is clicked: Becomes the right most digit of entry_box and current_value If + is clicked add current-value to current-sub-total clear entry box and set current-value to 0 set current-operation to addition If = is clicked if current-operation is addition add current-value to current-sub-total display current-sub-total","title":"Tkinter Calculator Pseudo Code"},{"location":"TKinter/calc_with_eval_pseudo_code/","text":"Pseudo Code for Tkinter Calculator using Eval Statement Setup stringToEvaluate = \"\" Function to handles numbers and decimal point Just append the number or decimal point to the stringToEvaluate variable Called with parameter that's either a number or a decimal point. Strings in either case. global stringToEvaluate stringToEvaluate = stringToEvaluate + parameter Function with math operator Evaluate what's in stringToEvaluate and then append the math operator we got to it and put it back in stringToEvaluate Called with a parameter that's a 1 character string of +, -, *, or / global stringToEvaluate if current stringToEvaluate is \"\" (empty like I originally set it) only the minus sign makes sense. if","title":"Pseudo Code for Tkinter Calculator using Eval Statement"},{"location":"TKinter/calc_with_eval_pseudo_code/#pseudo-code-for-tkinter-calculator-using-eval-statement","text":"","title":"Pseudo Code for Tkinter Calculator using Eval Statement"},{"location":"TKinter/calc_with_eval_pseudo_code/#setup","text":"stringToEvaluate = \"\"","title":"Setup"},{"location":"TKinter/calc_with_eval_pseudo_code/#function-to-handles-numbers-and-decimal-point","text":"","title":"Function to handles numbers and decimal point"},{"location":"TKinter/calc_with_eval_pseudo_code/#just-append-the-number-or-decimal-point-to-the-stringtoevaluate-variable","text":"Called with parameter that's either a number or a decimal point. Strings in either case. global stringToEvaluate stringToEvaluate = stringToEvaluate + parameter","title":"Just append the number or decimal point to the stringToEvaluate variable"},{"location":"TKinter/calc_with_eval_pseudo_code/#function-with-math-operator","text":"","title":"Function with math operator"},{"location":"TKinter/calc_with_eval_pseudo_code/#evaluate-whats-in-stringtoevaluate-and-then-append-the-math-operator-we-got-to-it-and-put-it-back-in-stringtoevaluate","text":"Called with a parameter that's a 1 character string of +, -, *, or / global stringToEvaluate if current stringToEvaluate is \"\" (empty like I originally set it) only the minus sign makes sense. if","title":"Evaluate what's in stringToEvaluate and then append the math operator we got to it and put it back in stringToEvaluate"},{"location":"TKinter/common_properties/","text":"Common Properties in Tkinter padx, pady both put space inside the widget but outside the text state mostly used for buttons - disable will grey out the button. fg = foreground color, can use named colors and hex codes bg = background color, can use named colors and hex codes border_width = integer, width of the border","title":"Common properties"},{"location":"TKinter/common_properties/#common-properties-in-tkinter","text":"padx, pady both put space inside the widget but outside the text state mostly used for buttons - disable will grey out the button. fg = foreground color, can use named colors and hex codes bg = background color, can use named colors and hex codes border_width = integer, width of the border","title":"Common Properties in Tkinter"},{"location":"TKinter/entry/","text":"Tkinter Entry Widget Allows user to enter data. e = tk.Entry(root, width=50) e.delete(0, END) # Clears the box e.insert(0, \"Enter Your Data\") # Puts default data in the entry box, 0 he didn't explain text_from_entry = e.get()","title":"Entry"},{"location":"TKinter/entry/#tkinter-entry-widget","text":"Allows user to enter data. e = tk.Entry(root, width=50) e.delete(0, END) # Clears the box e.insert(0, \"Enter Your Data\") # Puts default data in the entry box, 0 he didn't explain text_from_entry = e.get()","title":"Tkinter Entry Widget"},{"location":"TKinter/grid/","text":"Tkinter Grid System Typical grid - rows and columns. Both are numbered from zero. # Create two label widgets myLabel1 = tk.Label(root, text=\"Line 1\") myLabel2 = tk.Label(root, text=\"Line 2\") myLabel1.grid(row=0, column=0) myLabel2.grid(row=1, column=0) The rows and columns are relative to each other if you put myLabel2 into column 1 or column 5 it's in the column next to column 0. Tkinter just ignores empty columns or rows.","title":"Grid"},{"location":"TKinter/grid/#tkinter-grid-system","text":"Typical grid - rows and columns. Both are numbered from zero. # Create two label widgets myLabel1 = tk.Label(root, text=\"Line 1\") myLabel2 = tk.Label(root, text=\"Line 2\") myLabel1.grid(row=0, column=0) myLabel2.grid(row=1, column=0) The rows and columns are relative to each other if you put myLabel2 into column 1 or column 5 it's in the column next to column 0. Tkinter just ignores empty columns or rows.","title":"Tkinter Grid System"},{"location":"TKinter/label/","text":"Tkinter Labels # Create the label widget myLabel = tk.Label(root, text=\"Hello World!\") # Pack it on the screen myLabel.pack()","title":"Label"},{"location":"TKinter/label/#tkinter-labels","text":"# Create the label widget myLabel = tk.Label(root, text=\"Hello World!\") # Pack it on the screen myLabel.pack()","title":"Tkinter Labels"},{"location":"TKinter/virtual_environment/","text":"Create a Virtual Environment In the youtube videos he doesn't mention a virtual environment, but in the videos on his own Codemy.com site, he suggests using a virtual environment. Initialize it python -m venv name_of_virtual_environment Activate it: source name_of_virtual_environment/bin/activate Deactivate it: deactivate","title":"Virtual environment"},{"location":"TKinter/virtual_environment/#create-a-virtual-environment","text":"In the youtube videos he doesn't mention a virtual environment, but in the videos on his own Codemy.com site, he suggests using a virtual environment. Initialize it python -m venv name_of_virtual_environment Activate it: source name_of_virtual_environment/bin/activate Deactivate it: deactivate","title":"Create a Virtual Environment"}]}